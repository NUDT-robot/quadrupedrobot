.. 肢体 LimbModel类文档

.. _LimbModel-class-label:
 
肢体模型LimbModel类
=======================================

该类代表机器人的肢体，一个肢体由3个连杆( :ref:`LinkModel-class-label` )组成，负责肢体部的正、逆运动学和动力学计算，根据传感器数据提供的关节角度，通过差分实时计算角速度与角加速度以及与地面接触的末端连杆坐标系相对于肢体坐标系的旋转矩阵。详细描述和数学推导请参考文档 :ref:`math-doc-label`。

LimbModel类成员变量
-------------------------------------------------

.. code-block:: c++

 public:
    enum LIMB_STATE
    {
        SWING = 0,
        SUPPORT = 1
    };

LIMB_STATE枚举变量用于指示当前肢体状态，SWING表示处于摆动状态，SUPPORT表示处于支撑(触地)状态。

.. code-block:: c++

 private:
    bool m_isvalid = 0;

如果模型已正确初始化，那么该变量值为TRUE,否则为FALSE。

.. code-block:: c++
 
 private:
    bool m_dataValid = false; 

该成员用来指示来自传感器的数据(例如关节角、关节力矩、姿态等)是否可用，可用则值为TRUE，否则为FALSE。

.. code-block:: c++

 private:
    u_char m_numOfLink = 3;

该成员变量的值表示组成一个肢体的连杆数量，目前默认为3连杆。

.. code-block:: c++

 private:
    LinkModel* m_prod[3] = {0,0,0};

构成一个肢体的连杆类数组指针，目前默认为3连杆。

.. code-block:: c++

 private:
    double m_steptime = 0.001;
	double m_factorTime = 1000;

m_steptime成员变量存储时间步长，用于通过差分来计算速度和加速度，m_factorTime仅为m_steptime的倒数。

.. code-block:: c++

 private:
    LIMB_STATE limb_state = SUPPORT;

初始情况下，默认每个肢体处于支撑状态。

运动学相关成员变量
+++++++++++++++++++++++++++++++++++++++

.. code-block:: c++

 private:
    Vector3d m_originPos;     //Origin position of O1XYZ frame in OXYZ frame, Default value 0
    Vector3d m_originVel;     //Origin velocity of O1XYZ frame in OXYZ frame, Default value 0
    Vector3d m_originAccVel;     //Origin Accelerated velocity of O1XYZ frame in OXYZ frame, Default value 0

肢体坐标系O1XYZ原点相对于机器人体坐标系OXYZ的位置、速度和加速度，关于坐标系的详细描述和数学推导请参考文档 :ref:`math-doc-label`。

.. code-block:: c++

 private:
    double m_thetaPos[3];
    double m_thetaVel[3];     
    double m_thetaAccVel[3];

m_thetaPos存储当前时刻关节位置，m_thetaVel存储当前时刻关节角速度，m_thetaAccVel存储当前时刻关节角加速度。

.. code-block:: c++

 private:
    Vector3d m_pointPos[3];
	Vector3d m_pointVel[3];
    Vector3d m_pointAccVel[3];

m_pointPos[0]为A点在肢体坐标系中的位置向量，m_pointPos[1]为B点在肢体坐标系中的位置向量，m_pointPos[2]为C点在肢体坐标系中的位置向量，有关A、B和C点定义，请参考文档 :ref:`math-doc-label`。m_pointVel[3]与m_pointAccVel[3]分别为ABC三点的速度和加速度。

.. code-block:: c++

 private:
    InverAnswer inv_ans_tree;
    std::vector<Vector3d> m_invans;

inv_ans_tree是存放逆运动学求解过程中解得的关节角数据的树( :ref:`详见InverAnswer类 <InverAnswer-class-label>` )，m_invans存放最终的逆运动学解，容器的大小即为解的数量，Vector3d的XYZ三个值分别为角1、角2和角3,有关角的定义请参考文档 :ref:`math-doc-label`。

.. code-block:: c++

 private:
    Matrix3d R_BtoBody;

连杆B坐标系到肢体坐标系的旋转矩阵。

动力学相关成员变量
+++++++++++++++++++++++++++++++++++++++

.. code-block:: c++

 private:
    Vector3d  generalizedJointWrench;

以关节角为广义坐标，该变量为相应的广义力。

.. code-block:: c++
   
 private: 
    double baseParameters[3][BASEPARASIZE];

基参数数组，用于计算动力学方程，数值由参数辨识过程确定。
   
.. code-block:: c++

 private:
    Vector3d contactforce_P;

在肢体坐标系下的接触力向量。

.. code-block:: c++

 private:
    double generalized_cf[3] = {0,0,0};
    double generalized_cfint[3] = {0,0,0};
    ulong index_GFFB = 0;
    double theta1_t0,theta2_t0,theta3_t0;
    double dtheta1_t0,dtheta2_t0,dtheta3_t0;
    double L_Integralsum[3][36];
    double torque_integral[3];
    double gcf_integral[3] = {0,0,0};
    double gcf_eval[3]={0,0,0};
    ulong simstep = 0;
    bool resetIntegral = 1;

计算足端接触力用到的内部变量，这些变量很可能会发生发动，细节请参考代码注释。

LimbModel类私有成员函数
-------------------------------------------------


.. code-block:: c++

 private:
    inline void SetValid(bool valid){m_dataValid = valid;}

设置传感器数据可用状态，True为可用，False为不可用。

.. code-block:: c++

 private:
    void SetupModel(void);

模型初始化函数。

.. code-block:: c++
    
 private:
    bool InvCalTheta2(double cx, double d, double e, TreeNode<double>* ptheta3);
    bool InvCalTheta1and3Then2(const Vector3d& position, TreeNode<double>* proot);

仅为实现逆运动学计算提供函数调用。

.. code-block:: c++

 private:
    inline void SetOriginPos(Vector3d& pos)   { m_originPos = pos;}
    inline void SetOriginVel(Vector3d& vel)   { m_originVel = vel;}
    inline void SetOriginAccVel(Vector3d& accvel)   { m_originAccVel = accvel;}

.. code-block:: c++

 private:
    void CoordinateTransform();

这个函数实际完成了由连杆B坐标系到肢体坐标系的旋转矩阵计算。

设置肢体坐标系原点在机器人体坐标系中的位置、速度和加速度。

.. code-block:: c++

 private:
 	inline void SetGeneralizedForce(Vector3d gf) { generalizedJointWrench = gf; }
    inline Vector3d GetGeneralizedForce() { return generalizedJointWrench; }

仅在计算动力学内部实现使用，功能分别为设置和得到广义力。

.. _LimbModel-class-function_public-label:

LimbModel类公共成员函数
-------------------------------------------------

.. code-block:: c++

 public:
	LimbModel(u_char numsOfLink = 3);

创建肢体对象，numsOfLink表示构成肢体的实际连杆数量。

.. code-block:: c++

 public:
    ~LimbModel();

析构函数会释放所含连杆的内存资源。

.. code-block:: c++

 public:
	bool ModifyLinkParam(u_char rodindex,  double length, double cop, double mass, Matrix3d inertial );

该函数修改肢体所含连杆的属性，rodindex指定要修改的连杆索引，范围在1～m_numOfLink。length为指定的连杆长度，cop、mass、inertial三个变量实际上并未使用，当前可以随意指定。

.. code-block:: c++

 public:
    void SetSteptime(double steptime) {assert(steptime > 0); m_steptime = steptime;m_factorTime= 1.0/m_steptime;}

设置时间步长，单位为 **秒**，该步长用于差分计算速度和加速度。

.. code-block:: c++

 public:
    LIMB_STATE GetState();

该函数返回当前肢体状态，SWING表示处于摆动状态，SUPPORT表示处于支撑(触地)状态。

运动学函数
+++++++++++++++++++++++++++++++++++++++

.. code-block:: c++

 public:
    u_char GetNumsOfLink();

该函数返回当前构成肢体的连杆数量。

.. code-block:: c++

 public:
    LinkModel** GetLink();

该函数返回一个指向构成肢体的连杆指针数组，数组的大小可由GetNumsOfLink()函数获得。

.. code-block:: c++

 public:
    Vector3d GetOriginPos()   {return m_originPos;}
    Vector3d GetOriginVel()   {return m_originVel;}
    Vector3d GetOriginAccVel()   {return m_originAccVel;}

这三个函数分别返回肢体坐标系原点在机器人体坐标系中的位置、速度和加速度向量。

.. code-block:: c++

 public:
    
    double GetThetaPos(u_char index)
    double GetThetaVel(u_char index)        
    double GetThetaAccVel(u_char index)

这三个函数分别返回由index指向关节的角位移、速度和加速度。index范围在1～m_numOfLink，超出该范围将向终端输出错误信息并返回1e10。对于关节角的定义，请参考文档 :ref:`math-doc-label`。

.. code-block:: c++

 public:
    inline Vector3d GetPointPos(u_char index)   {return m_pointPos[index-1];}
    inline Vector3d GetPointVel(u_char index)   {return m_pointVel[index-1];}
    inline Vector3d GetPointAccVel(u_char index)   {return m_pointAccVel[index-1];}

这三个函数分别返回肢体连杆上A、B和C点在肢体坐标系中的位置、速度和加速度向量，index范围在1～m_numOfLink。对于连杆上点的定义，请参考文档 :ref:`math-doc-label`。函数GetPointAccVel目前并没有实现，不应被使用。

.. code-block:: c++

 public:
    inline Matrix3d GetCoordTransformMatrix() {return R_BtoBody;}

该函数返回一个由B连杆坐标系到肢体坐标系的旋转矩阵，有关坐标系及旋转矩阵的表达式，请参考文档 :ref:`math-doc-label`。

.. code-block:: c++

 public:
    void SetThetaPos(u_char index, double pos)        
    void SetThetaVel(u_char index, double vel)       
    void SetThetaAccVel(u_char index, double accvel)

这三个函数分别设置由index指定的关节角、角速度和角加速度，index范围在1～m_numOfLink，如果超出范围，则函数会向终端发出错误提示并返回。

.. warning::
	关节角的位置、速度和加速度是根据传感器提供的数据计算获得，因此这三个函数一般不应该被使用！当前的应用只存在于对逆运动学解的验证！

.. code-block:: c++

 public:
    void Step();

该函数会计算A、B、C三点位置，更新旋转矩阵，然后通过动力学计算估计足底力。 

.. code-block:: c++

 public:
    void CalMainPointPos();

该函数通过当前关节角度计算A、B、C三点位置。

.. code-block:: c++

 public:
    Vector3d GetMainPointPos(int index);

函数返回A、B、C三点位置，index范围为1～3,分别表示A、B、C三点。

.. code-block:: c++

 public:
    bool CalInvertKinetics(const Vector3d& postition);
    const std::vector<Vector3d>& GetInvAnswer();

CalInvertKinetics函数根据参数postition计算逆运动学，如果有解，则返回True，否则返回False。要得到逆运动学解，首先应调用CalInvertKinetics，如果有解存在，那么调用GetInvAnswer函数。GetInvAnswer返回一个储存解的容器，Vector3d的三个变量XYZ分别对应角123。

.. code-block:: c++

 public:
    void DynamicsCalFootContactForce();
    void DynamicsCalFootContactForceWithoutAcc();
    inline Vector3d GetContactForce();

足底力估计相关函数。DynamicsCalFootContactForce是直接利用原始动力学方程计算足底力，DynamicsCalFootContactForceWithoutAcc是利用广义扰动观测器(GM)进行足底力计算，GetContactForce简单地返回足端估计力结果向量。

.. code-block:: c++

	friend class QuadRobot;

为了使机器人类能访问肢体私有成员，设置其为友元类。

