// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactsensors.proto

#ifndef PROTOBUF_contactsensors_2eproto__INCLUDED
#define PROTOBUF_contactsensors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace QRCS {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_contactsensors_2eproto();
void protobuf_AssignDesc_contactsensors_2eproto();
void protobuf_ShutdownFile_contactsensors_2eproto();

class Contact;
class ContactSensors;
class Contacts;
class JointWrench;
class Time;
class Vector3d;
class Wrench;

// ===================================================================

class Vector3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QRCS.msgs.Vector3d) */ {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  void Swap(Vector3d* other);

  // implements Message ----------------------------------------------

  inline Vector3d* New() const { return New(NULL); }

  Vector3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:QRCS.msgs.Vector3d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_contactsensors_2eproto();
  friend void protobuf_AssignDesc_contactsensors_2eproto();
  friend void protobuf_ShutdownFile_contactsensors_2eproto();

  void InitAsDefaultInstance();
  static Vector3d* default_instance_;
};
// -------------------------------------------------------------------

class Wrench : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QRCS.msgs.Wrench) */ {
 public:
  Wrench();
  virtual ~Wrench();

  Wrench(const Wrench& from);

  inline Wrench& operator=(const Wrench& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wrench& default_instance();

  void Swap(Wrench* other);

  // implements Message ----------------------------------------------

  inline Wrench* New() const { return New(NULL); }

  Wrench* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wrench& from);
  void MergeFrom(const Wrench& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Wrench* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .QRCS.msgs.Vector3d force = 1;
  bool has_force() const;
  void clear_force();
  static const int kForceFieldNumber = 1;
  const ::QRCS::msgs::Vector3d& force() const;
  ::QRCS::msgs::Vector3d* mutable_force();
  ::QRCS::msgs::Vector3d* release_force();
  void set_allocated_force(::QRCS::msgs::Vector3d* force);

  // required .QRCS.msgs.Vector3d torque = 2;
  bool has_torque() const;
  void clear_torque();
  static const int kTorqueFieldNumber = 2;
  const ::QRCS::msgs::Vector3d& torque() const;
  ::QRCS::msgs::Vector3d* mutable_torque();
  ::QRCS::msgs::Vector3d* release_torque();
  void set_allocated_torque(::QRCS::msgs::Vector3d* torque);

  // optional .QRCS.msgs.Vector3d force_offset = 3;
  bool has_force_offset() const;
  void clear_force_offset();
  static const int kForceOffsetFieldNumber = 3;
  const ::QRCS::msgs::Vector3d& force_offset() const;
  ::QRCS::msgs::Vector3d* mutable_force_offset();
  ::QRCS::msgs::Vector3d* release_force_offset();
  void set_allocated_force_offset(::QRCS::msgs::Vector3d* force_offset);

  // @@protoc_insertion_point(class_scope:QRCS.msgs.Wrench)
 private:
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_torque();
  inline void clear_has_torque();
  inline void set_has_force_offset();
  inline void clear_has_force_offset();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::QRCS::msgs::Vector3d* force_;
  ::QRCS::msgs::Vector3d* torque_;
  ::QRCS::msgs::Vector3d* force_offset_;
  friend void  protobuf_AddDesc_contactsensors_2eproto();
  friend void protobuf_AssignDesc_contactsensors_2eproto();
  friend void protobuf_ShutdownFile_contactsensors_2eproto();

  void InitAsDefaultInstance();
  static Wrench* default_instance_;
};
// -------------------------------------------------------------------

class JointWrench : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QRCS.msgs.JointWrench) */ {
 public:
  JointWrench();
  virtual ~JointWrench();

  JointWrench(const JointWrench& from);

  inline JointWrench& operator=(const JointWrench& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointWrench& default_instance();

  void Swap(JointWrench* other);

  // implements Message ----------------------------------------------

  inline JointWrench* New() const { return New(NULL); }

  JointWrench* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointWrench& from);
  void MergeFrom(const JointWrench& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JointWrench* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string body_1_name = 1;
  bool has_body_1_name() const;
  void clear_body_1_name();
  static const int kBody1NameFieldNumber = 1;
  const ::std::string& body_1_name() const;
  void set_body_1_name(const ::std::string& value);
  void set_body_1_name(const char* value);
  void set_body_1_name(const char* value, size_t size);
  ::std::string* mutable_body_1_name();
  ::std::string* release_body_1_name();
  void set_allocated_body_1_name(::std::string* body_1_name);

  // required uint32 body_1_id = 2;
  bool has_body_1_id() const;
  void clear_body_1_id();
  static const int kBody1IdFieldNumber = 2;
  ::google::protobuf::uint32 body_1_id() const;
  void set_body_1_id(::google::protobuf::uint32 value);

  // required string body_2_name = 3;
  bool has_body_2_name() const;
  void clear_body_2_name();
  static const int kBody2NameFieldNumber = 3;
  const ::std::string& body_2_name() const;
  void set_body_2_name(const ::std::string& value);
  void set_body_2_name(const char* value);
  void set_body_2_name(const char* value, size_t size);
  ::std::string* mutable_body_2_name();
  ::std::string* release_body_2_name();
  void set_allocated_body_2_name(::std::string* body_2_name);

  // required uint32 body_2_id = 4;
  bool has_body_2_id() const;
  void clear_body_2_id();
  static const int kBody2IdFieldNumber = 4;
  ::google::protobuf::uint32 body_2_id() const;
  void set_body_2_id(::google::protobuf::uint32 value);

  // required .QRCS.msgs.Wrench body_1_wrench = 5;
  bool has_body_1_wrench() const;
  void clear_body_1_wrench();
  static const int kBody1WrenchFieldNumber = 5;
  const ::QRCS::msgs::Wrench& body_1_wrench() const;
  ::QRCS::msgs::Wrench* mutable_body_1_wrench();
  ::QRCS::msgs::Wrench* release_body_1_wrench();
  void set_allocated_body_1_wrench(::QRCS::msgs::Wrench* body_1_wrench);

  // required .QRCS.msgs.Wrench body_2_wrench = 6;
  bool has_body_2_wrench() const;
  void clear_body_2_wrench();
  static const int kBody2WrenchFieldNumber = 6;
  const ::QRCS::msgs::Wrench& body_2_wrench() const;
  ::QRCS::msgs::Wrench* mutable_body_2_wrench();
  ::QRCS::msgs::Wrench* release_body_2_wrench();
  void set_allocated_body_2_wrench(::QRCS::msgs::Wrench* body_2_wrench);

  // @@protoc_insertion_point(class_scope:QRCS.msgs.JointWrench)
 private:
  inline void set_has_body_1_name();
  inline void clear_has_body_1_name();
  inline void set_has_body_1_id();
  inline void clear_has_body_1_id();
  inline void set_has_body_2_name();
  inline void clear_has_body_2_name();
  inline void set_has_body_2_id();
  inline void clear_has_body_2_id();
  inline void set_has_body_1_wrench();
  inline void clear_has_body_1_wrench();
  inline void set_has_body_2_wrench();
  inline void clear_has_body_2_wrench();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr body_1_name_;
  ::google::protobuf::internal::ArenaStringPtr body_2_name_;
  ::google::protobuf::uint32 body_1_id_;
  ::google::protobuf::uint32 body_2_id_;
  ::QRCS::msgs::Wrench* body_1_wrench_;
  ::QRCS::msgs::Wrench* body_2_wrench_;
  friend void  protobuf_AddDesc_contactsensors_2eproto();
  friend void protobuf_AssignDesc_contactsensors_2eproto();
  friend void protobuf_ShutdownFile_contactsensors_2eproto();

  void InitAsDefaultInstance();
  static JointWrench* default_instance_;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QRCS.msgs.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  void Swap(Time* other);

  // implements Message ----------------------------------------------

  inline Time* New() const { return New(NULL); }

  Time* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sec = 1;
  bool has_sec() const;
  void clear_sec();
  static const int kSecFieldNumber = 1;
  ::google::protobuf::int32 sec() const;
  void set_sec(::google::protobuf::int32 value);

  // required int32 nsec = 2;
  bool has_nsec() const;
  void clear_nsec();
  static const int kNsecFieldNumber = 2;
  ::google::protobuf::int32 nsec() const;
  void set_nsec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QRCS.msgs.Time)
 private:
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_nsec();
  inline void clear_has_nsec();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sec_;
  ::google::protobuf::int32 nsec_;
  friend void  protobuf_AddDesc_contactsensors_2eproto();
  friend void protobuf_AssignDesc_contactsensors_2eproto();
  friend void protobuf_ShutdownFile_contactsensors_2eproto();

  void InitAsDefaultInstance();
  static Time* default_instance_;
};
// -------------------------------------------------------------------

class Contact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QRCS.msgs.Contact) */ {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();

  void Swap(Contact* other);

  // implements Message ----------------------------------------------

  inline Contact* New() const { return New(NULL); }

  Contact* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string collision1 = 1;
  bool has_collision1() const;
  void clear_collision1();
  static const int kCollision1FieldNumber = 1;
  const ::std::string& collision1() const;
  void set_collision1(const ::std::string& value);
  void set_collision1(const char* value);
  void set_collision1(const char* value, size_t size);
  ::std::string* mutable_collision1();
  ::std::string* release_collision1();
  void set_allocated_collision1(::std::string* collision1);

  // required string collision2 = 2;
  bool has_collision2() const;
  void clear_collision2();
  static const int kCollision2FieldNumber = 2;
  const ::std::string& collision2() const;
  void set_collision2(const ::std::string& value);
  void set_collision2(const char* value);
  void set_collision2(const char* value, size_t size);
  ::std::string* mutable_collision2();
  ::std::string* release_collision2();
  void set_allocated_collision2(::std::string* collision2);

  // repeated .QRCS.msgs.Vector3d position = 3;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::QRCS::msgs::Vector3d& position(int index) const;
  ::QRCS::msgs::Vector3d* mutable_position(int index);
  ::QRCS::msgs::Vector3d* add_position();
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >*
      mutable_position();
  const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >&
      position() const;

  // repeated .QRCS.msgs.Vector3d normal = 4;
  int normal_size() const;
  void clear_normal();
  static const int kNormalFieldNumber = 4;
  const ::QRCS::msgs::Vector3d& normal(int index) const;
  ::QRCS::msgs::Vector3d* mutable_normal(int index);
  ::QRCS::msgs::Vector3d* add_normal();
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >*
      mutable_normal();
  const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >&
      normal() const;

  // repeated double depth = 5;
  int depth_size() const;
  void clear_depth();
  static const int kDepthFieldNumber = 5;
  double depth(int index) const;
  void set_depth(int index, double value);
  void add_depth(double value);
  const ::google::protobuf::RepeatedField< double >&
      depth() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_depth();

  // repeated .QRCS.msgs.JointWrench wrench = 6;
  int wrench_size() const;
  void clear_wrench();
  static const int kWrenchFieldNumber = 6;
  const ::QRCS::msgs::JointWrench& wrench(int index) const;
  ::QRCS::msgs::JointWrench* mutable_wrench(int index);
  ::QRCS::msgs::JointWrench* add_wrench();
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::JointWrench >*
      mutable_wrench();
  const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::JointWrench >&
      wrench() const;

  // required .QRCS.msgs.Time time = 7;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  const ::QRCS::msgs::Time& time() const;
  ::QRCS::msgs::Time* mutable_time();
  ::QRCS::msgs::Time* release_time();
  void set_allocated_time(::QRCS::msgs::Time* time);

  // required string world = 8;
  bool has_world() const;
  void clear_world();
  static const int kWorldFieldNumber = 8;
  const ::std::string& world() const;
  void set_world(const ::std::string& value);
  void set_world(const char* value);
  void set_world(const char* value, size_t size);
  ::std::string* mutable_world();
  ::std::string* release_world();
  void set_allocated_world(::std::string* world);

  // @@protoc_insertion_point(class_scope:QRCS.msgs.Contact)
 private:
  inline void set_has_collision1();
  inline void clear_has_collision1();
  inline void set_has_collision2();
  inline void clear_has_collision2();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_world();
  inline void clear_has_world();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr collision1_;
  ::google::protobuf::internal::ArenaStringPtr collision2_;
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d > position_;
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d > normal_;
  ::google::protobuf::RepeatedField< double > depth_;
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::JointWrench > wrench_;
  ::QRCS::msgs::Time* time_;
  ::google::protobuf::internal::ArenaStringPtr world_;
  friend void  protobuf_AddDesc_contactsensors_2eproto();
  friend void protobuf_AssignDesc_contactsensors_2eproto();
  friend void protobuf_ShutdownFile_contactsensors_2eproto();

  void InitAsDefaultInstance();
  static Contact* default_instance_;
};
// -------------------------------------------------------------------

class Contacts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QRCS.msgs.Contacts) */ {
 public:
  Contacts();
  virtual ~Contacts();

  Contacts(const Contacts& from);

  inline Contacts& operator=(const Contacts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contacts& default_instance();

  void Swap(Contacts* other);

  // implements Message ----------------------------------------------

  inline Contacts* New() const { return New(NULL); }

  Contacts* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contacts& from);
  void MergeFrom(const Contacts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Contacts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QRCS.msgs.Contact contact = 1;
  int contact_size() const;
  void clear_contact();
  static const int kContactFieldNumber = 1;
  const ::QRCS::msgs::Contact& contact(int index) const;
  ::QRCS::msgs::Contact* mutable_contact(int index);
  ::QRCS::msgs::Contact* add_contact();
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contact >*
      mutable_contact();
  const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contact >&
      contact() const;

  // required .QRCS.msgs.Time time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::QRCS::msgs::Time& time() const;
  ::QRCS::msgs::Time* mutable_time();
  ::QRCS::msgs::Time* release_time();
  void set_allocated_time(::QRCS::msgs::Time* time);

  // @@protoc_insertion_point(class_scope:QRCS.msgs.Contacts)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contact > contact_;
  ::QRCS::msgs::Time* time_;
  friend void  protobuf_AddDesc_contactsensors_2eproto();
  friend void protobuf_AssignDesc_contactsensors_2eproto();
  friend void protobuf_ShutdownFile_contactsensors_2eproto();

  void InitAsDefaultInstance();
  static Contacts* default_instance_;
};
// -------------------------------------------------------------------

class ContactSensors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QRCS.msgs.ContactSensors) */ {
 public:
  ContactSensors();
  virtual ~ContactSensors();

  ContactSensors(const ContactSensors& from);

  inline ContactSensors& operator=(const ContactSensors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactSensors& default_instance();

  void Swap(ContactSensors* other);

  // implements Message ----------------------------------------------

  inline ContactSensors* New() const { return New(NULL); }

  ContactSensors* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactSensors& from);
  void MergeFrom(const ContactSensors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactSensors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QRCS.msgs.Contacts contacts = 1;
  int contacts_size() const;
  void clear_contacts();
  static const int kContactsFieldNumber = 1;
  const ::QRCS::msgs::Contacts& contacts(int index) const;
  ::QRCS::msgs::Contacts* mutable_contacts(int index);
  ::QRCS::msgs::Contacts* add_contacts();
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contacts >*
      mutable_contacts();
  const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contacts >&
      contacts() const;

  // @@protoc_insertion_point(class_scope:QRCS.msgs.ContactSensors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contacts > contacts_;
  friend void  protobuf_AddDesc_contactsensors_2eproto();
  friend void protobuf_AssignDesc_contactsensors_2eproto();
  friend void protobuf_ShutdownFile_contactsensors_2eproto();

  void InitAsDefaultInstance();
  static ContactSensors* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3d

// required double x = 1;
inline bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Vector3d.x)
}

// required double y = 2;
inline bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Vector3d.y)
}

// required double z = 3;
inline bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Vector3d.z)
}

// -------------------------------------------------------------------

// Wrench

// required .QRCS.msgs.Vector3d force = 1;
inline bool Wrench::has_force() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wrench::set_has_force() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wrench::clear_has_force() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wrench::clear_force() {
  if (force_ != NULL) force_->::QRCS::msgs::Vector3d::Clear();
  clear_has_force();
}
inline const ::QRCS::msgs::Vector3d& Wrench::force() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Wrench.force)
  return force_ != NULL ? *force_ : *default_instance_->force_;
}
inline ::QRCS::msgs::Vector3d* Wrench::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::QRCS::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Wrench.force)
  return force_;
}
inline ::QRCS::msgs::Vector3d* Wrench::release_force() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Wrench.force)
  clear_has_force();
  ::QRCS::msgs::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
inline void Wrench::set_allocated_force(::QRCS::msgs::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Wrench.force)
}

// required .QRCS.msgs.Vector3d torque = 2;
inline bool Wrench::has_torque() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wrench::set_has_torque() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wrench::clear_has_torque() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wrench::clear_torque() {
  if (torque_ != NULL) torque_->::QRCS::msgs::Vector3d::Clear();
  clear_has_torque();
}
inline const ::QRCS::msgs::Vector3d& Wrench::torque() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Wrench.torque)
  return torque_ != NULL ? *torque_ : *default_instance_->torque_;
}
inline ::QRCS::msgs::Vector3d* Wrench::mutable_torque() {
  set_has_torque();
  if (torque_ == NULL) {
    torque_ = new ::QRCS::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Wrench.torque)
  return torque_;
}
inline ::QRCS::msgs::Vector3d* Wrench::release_torque() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Wrench.torque)
  clear_has_torque();
  ::QRCS::msgs::Vector3d* temp = torque_;
  torque_ = NULL;
  return temp;
}
inline void Wrench::set_allocated_torque(::QRCS::msgs::Vector3d* torque) {
  delete torque_;
  torque_ = torque;
  if (torque) {
    set_has_torque();
  } else {
    clear_has_torque();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Wrench.torque)
}

// optional .QRCS.msgs.Vector3d force_offset = 3;
inline bool Wrench::has_force_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wrench::set_has_force_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wrench::clear_has_force_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wrench::clear_force_offset() {
  if (force_offset_ != NULL) force_offset_->::QRCS::msgs::Vector3d::Clear();
  clear_has_force_offset();
}
inline const ::QRCS::msgs::Vector3d& Wrench::force_offset() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Wrench.force_offset)
  return force_offset_ != NULL ? *force_offset_ : *default_instance_->force_offset_;
}
inline ::QRCS::msgs::Vector3d* Wrench::mutable_force_offset() {
  set_has_force_offset();
  if (force_offset_ == NULL) {
    force_offset_ = new ::QRCS::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Wrench.force_offset)
  return force_offset_;
}
inline ::QRCS::msgs::Vector3d* Wrench::release_force_offset() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Wrench.force_offset)
  clear_has_force_offset();
  ::QRCS::msgs::Vector3d* temp = force_offset_;
  force_offset_ = NULL;
  return temp;
}
inline void Wrench::set_allocated_force_offset(::QRCS::msgs::Vector3d* force_offset) {
  delete force_offset_;
  force_offset_ = force_offset;
  if (force_offset) {
    set_has_force_offset();
  } else {
    clear_has_force_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Wrench.force_offset)
}

// -------------------------------------------------------------------

// JointWrench

// required string body_1_name = 1;
inline bool JointWrench::has_body_1_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointWrench::set_has_body_1_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointWrench::clear_has_body_1_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointWrench::clear_body_1_name() {
  body_1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body_1_name();
}
inline const ::std::string& JointWrench::body_1_name() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_1_name)
  return body_1_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointWrench::set_body_1_name(const ::std::string& value) {
  set_has_body_1_name();
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_1_name)
}
inline void JointWrench::set_body_1_name(const char* value) {
  set_has_body_1_name();
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.JointWrench.body_1_name)
}
inline void JointWrench::set_body_1_name(const char* value, size_t size) {
  set_has_body_1_name();
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.JointWrench.body_1_name)
}
inline ::std::string* JointWrench::mutable_body_1_name() {
  set_has_body_1_name();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_1_name)
  return body_1_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JointWrench::release_body_1_name() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_1_name)
  clear_has_body_1_name();
  return body_1_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointWrench::set_allocated_body_1_name(::std::string* body_1_name) {
  if (body_1_name != NULL) {
    set_has_body_1_name();
  } else {
    clear_has_body_1_name();
  }
  body_1_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body_1_name);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_1_name)
}

// required uint32 body_1_id = 2;
inline bool JointWrench::has_body_1_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointWrench::set_has_body_1_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointWrench::clear_has_body_1_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JointWrench::clear_body_1_id() {
  body_1_id_ = 0u;
  clear_has_body_1_id();
}
inline ::google::protobuf::uint32 JointWrench::body_1_id() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_1_id)
  return body_1_id_;
}
inline void JointWrench::set_body_1_id(::google::protobuf::uint32 value) {
  set_has_body_1_id();
  body_1_id_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_1_id)
}

// required string body_2_name = 3;
inline bool JointWrench::has_body_2_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JointWrench::set_has_body_2_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JointWrench::clear_has_body_2_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JointWrench::clear_body_2_name() {
  body_2_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body_2_name();
}
inline const ::std::string& JointWrench::body_2_name() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_2_name)
  return body_2_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointWrench::set_body_2_name(const ::std::string& value) {
  set_has_body_2_name();
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_2_name)
}
inline void JointWrench::set_body_2_name(const char* value) {
  set_has_body_2_name();
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.JointWrench.body_2_name)
}
inline void JointWrench::set_body_2_name(const char* value, size_t size) {
  set_has_body_2_name();
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.JointWrench.body_2_name)
}
inline ::std::string* JointWrench::mutable_body_2_name() {
  set_has_body_2_name();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_2_name)
  return body_2_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JointWrench::release_body_2_name() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_2_name)
  clear_has_body_2_name();
  return body_2_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointWrench::set_allocated_body_2_name(::std::string* body_2_name) {
  if (body_2_name != NULL) {
    set_has_body_2_name();
  } else {
    clear_has_body_2_name();
  }
  body_2_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body_2_name);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_2_name)
}

// required uint32 body_2_id = 4;
inline bool JointWrench::has_body_2_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JointWrench::set_has_body_2_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JointWrench::clear_has_body_2_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JointWrench::clear_body_2_id() {
  body_2_id_ = 0u;
  clear_has_body_2_id();
}
inline ::google::protobuf::uint32 JointWrench::body_2_id() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_2_id)
  return body_2_id_;
}
inline void JointWrench::set_body_2_id(::google::protobuf::uint32 value) {
  set_has_body_2_id();
  body_2_id_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_2_id)
}

// required .QRCS.msgs.Wrench body_1_wrench = 5;
inline bool JointWrench::has_body_1_wrench() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JointWrench::set_has_body_1_wrench() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JointWrench::clear_has_body_1_wrench() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JointWrench::clear_body_1_wrench() {
  if (body_1_wrench_ != NULL) body_1_wrench_->::QRCS::msgs::Wrench::Clear();
  clear_has_body_1_wrench();
}
inline const ::QRCS::msgs::Wrench& JointWrench::body_1_wrench() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_1_wrench)
  return body_1_wrench_ != NULL ? *body_1_wrench_ : *default_instance_->body_1_wrench_;
}
inline ::QRCS::msgs::Wrench* JointWrench::mutable_body_1_wrench() {
  set_has_body_1_wrench();
  if (body_1_wrench_ == NULL) {
    body_1_wrench_ = new ::QRCS::msgs::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_1_wrench)
  return body_1_wrench_;
}
inline ::QRCS::msgs::Wrench* JointWrench::release_body_1_wrench() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_1_wrench)
  clear_has_body_1_wrench();
  ::QRCS::msgs::Wrench* temp = body_1_wrench_;
  body_1_wrench_ = NULL;
  return temp;
}
inline void JointWrench::set_allocated_body_1_wrench(::QRCS::msgs::Wrench* body_1_wrench) {
  delete body_1_wrench_;
  body_1_wrench_ = body_1_wrench;
  if (body_1_wrench) {
    set_has_body_1_wrench();
  } else {
    clear_has_body_1_wrench();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_1_wrench)
}

// required .QRCS.msgs.Wrench body_2_wrench = 6;
inline bool JointWrench::has_body_2_wrench() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JointWrench::set_has_body_2_wrench() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JointWrench::clear_has_body_2_wrench() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JointWrench::clear_body_2_wrench() {
  if (body_2_wrench_ != NULL) body_2_wrench_->::QRCS::msgs::Wrench::Clear();
  clear_has_body_2_wrench();
}
inline const ::QRCS::msgs::Wrench& JointWrench::body_2_wrench() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_2_wrench)
  return body_2_wrench_ != NULL ? *body_2_wrench_ : *default_instance_->body_2_wrench_;
}
inline ::QRCS::msgs::Wrench* JointWrench::mutable_body_2_wrench() {
  set_has_body_2_wrench();
  if (body_2_wrench_ == NULL) {
    body_2_wrench_ = new ::QRCS::msgs::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_2_wrench)
  return body_2_wrench_;
}
inline ::QRCS::msgs::Wrench* JointWrench::release_body_2_wrench() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_2_wrench)
  clear_has_body_2_wrench();
  ::QRCS::msgs::Wrench* temp = body_2_wrench_;
  body_2_wrench_ = NULL;
  return temp;
}
inline void JointWrench::set_allocated_body_2_wrench(::QRCS::msgs::Wrench* body_2_wrench) {
  delete body_2_wrench_;
  body_2_wrench_ = body_2_wrench;
  if (body_2_wrench) {
    set_has_body_2_wrench();
  } else {
    clear_has_body_2_wrench();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_2_wrench)
}

// -------------------------------------------------------------------

// Time

// required int32 sec = 1;
inline bool Time::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Time::set_has_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Time::clear_has_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Time::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 Time::sec() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Time.sec)
  return sec_;
}
inline void Time::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Time.sec)
}

// required int32 nsec = 2;
inline bool Time::has_nsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Time::set_has_nsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Time::clear_has_nsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Time::clear_nsec() {
  nsec_ = 0;
  clear_has_nsec();
}
inline ::google::protobuf::int32 Time::nsec() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Time.nsec)
  return nsec_;
}
inline void Time::set_nsec(::google::protobuf::int32 value) {
  set_has_nsec();
  nsec_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Time.nsec)
}

// -------------------------------------------------------------------

// Contact

// required string collision1 = 1;
inline bool Contact::has_collision1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_collision1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_collision1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_collision1() {
  collision1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision1();
}
inline const ::std::string& Contact::collision1() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.collision1)
  return collision1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_collision1(const ::std::string& value) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.collision1)
}
inline void Contact::set_collision1(const char* value) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.Contact.collision1)
}
inline void Contact::set_collision1(const char* value, size_t size) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.Contact.collision1)
}
inline ::std::string* Contact::mutable_collision1() {
  set_has_collision1();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.collision1)
  return collision1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_collision1() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.collision1)
  clear_has_collision1();
  return collision1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_collision1(::std::string* collision1) {
  if (collision1 != NULL) {
    set_has_collision1();
  } else {
    clear_has_collision1();
  }
  collision1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision1);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.collision1)
}

// required string collision2 = 2;
inline bool Contact::has_collision2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contact::set_has_collision2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contact::clear_has_collision2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contact::clear_collision2() {
  collision2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision2();
}
inline const ::std::string& Contact::collision2() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.collision2)
  return collision2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_collision2(const ::std::string& value) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.collision2)
}
inline void Contact::set_collision2(const char* value) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.Contact.collision2)
}
inline void Contact::set_collision2(const char* value, size_t size) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.Contact.collision2)
}
inline ::std::string* Contact::mutable_collision2() {
  set_has_collision2();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.collision2)
  return collision2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_collision2() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.collision2)
  clear_has_collision2();
  return collision2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_collision2(::std::string* collision2) {
  if (collision2 != NULL) {
    set_has_collision2();
  } else {
    clear_has_collision2();
  }
  collision2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision2);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.collision2)
}

// repeated .QRCS.msgs.Vector3d position = 3;
inline int Contact::position_size() const {
  return position_.size();
}
inline void Contact::clear_position() {
  position_.Clear();
}
inline const ::QRCS::msgs::Vector3d& Contact::position(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.position)
  return position_.Get(index);
}
inline ::QRCS::msgs::Vector3d* Contact::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.position)
  return position_.Mutable(index);
}
inline ::QRCS::msgs::Vector3d* Contact::add_position() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.position)
  return position_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >*
Contact::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.position)
  return &position_;
}
inline const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >&
Contact::position() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.position)
  return position_;
}

// repeated .QRCS.msgs.Vector3d normal = 4;
inline int Contact::normal_size() const {
  return normal_.size();
}
inline void Contact::clear_normal() {
  normal_.Clear();
}
inline const ::QRCS::msgs::Vector3d& Contact::normal(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.normal)
  return normal_.Get(index);
}
inline ::QRCS::msgs::Vector3d* Contact::mutable_normal(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.normal)
  return normal_.Mutable(index);
}
inline ::QRCS::msgs::Vector3d* Contact::add_normal() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.normal)
  return normal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >*
Contact::mutable_normal() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.normal)
  return &normal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >&
Contact::normal() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.normal)
  return normal_;
}

// repeated double depth = 5;
inline int Contact::depth_size() const {
  return depth_.size();
}
inline void Contact::clear_depth() {
  depth_.Clear();
}
inline double Contact::depth(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.depth)
  return depth_.Get(index);
}
inline void Contact::set_depth(int index, double value) {
  depth_.Set(index, value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.depth)
}
inline void Contact::add_depth(double value) {
  depth_.Add(value);
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.depth)
}
inline const ::google::protobuf::RepeatedField< double >&
Contact::depth() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.depth)
  return depth_;
}
inline ::google::protobuf::RepeatedField< double >*
Contact::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.depth)
  return &depth_;
}

// repeated .QRCS.msgs.JointWrench wrench = 6;
inline int Contact::wrench_size() const {
  return wrench_.size();
}
inline void Contact::clear_wrench() {
  wrench_.Clear();
}
inline const ::QRCS::msgs::JointWrench& Contact::wrench(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.wrench)
  return wrench_.Get(index);
}
inline ::QRCS::msgs::JointWrench* Contact::mutable_wrench(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.wrench)
  return wrench_.Mutable(index);
}
inline ::QRCS::msgs::JointWrench* Contact::add_wrench() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.wrench)
  return wrench_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::JointWrench >*
Contact::mutable_wrench() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.wrench)
  return &wrench_;
}
inline const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::JointWrench >&
Contact::wrench() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.wrench)
  return wrench_;
}

// required .QRCS.msgs.Time time = 7;
inline bool Contact::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Contact::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Contact::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Contact::clear_time() {
  if (time_ != NULL) time_->::QRCS::msgs::Time::Clear();
  clear_has_time();
}
inline const ::QRCS::msgs::Time& Contact::time() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::QRCS::msgs::Time* Contact::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::QRCS::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.time)
  return time_;
}
inline ::QRCS::msgs::Time* Contact::release_time() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.time)
  clear_has_time();
  ::QRCS::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Contact::set_allocated_time(::QRCS::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.time)
}

// required string world = 8;
inline bool Contact::has_world() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Contact::set_has_world() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Contact::clear_has_world() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Contact::clear_world() {
  world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_world();
}
inline const ::std::string& Contact::world() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.world)
  return world_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_world(const ::std::string& value) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.world)
}
inline void Contact::set_world(const char* value) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.Contact.world)
}
inline void Contact::set_world(const char* value, size_t size) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.Contact.world)
}
inline ::std::string* Contact::mutable_world() {
  set_has_world();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.world)
  return world_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_world() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.world)
  clear_has_world();
  return world_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_world(::std::string* world) {
  if (world != NULL) {
    set_has_world();
  } else {
    clear_has_world();
  }
  world_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), world);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.world)
}

// -------------------------------------------------------------------

// Contacts

// repeated .QRCS.msgs.Contact contact = 1;
inline int Contacts::contact_size() const {
  return contact_.size();
}
inline void Contacts::clear_contact() {
  contact_.Clear();
}
inline const ::QRCS::msgs::Contact& Contacts::contact(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contacts.contact)
  return contact_.Get(index);
}
inline ::QRCS::msgs::Contact* Contacts::mutable_contact(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contacts.contact)
  return contact_.Mutable(index);
}
inline ::QRCS::msgs::Contact* Contacts::add_contact() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contacts.contact)
  return contact_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contact >*
Contacts::mutable_contact() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contacts.contact)
  return &contact_;
}
inline const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contact >&
Contacts::contact() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contacts.contact)
  return contact_;
}

// required .QRCS.msgs.Time time = 2;
inline bool Contacts::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contacts::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contacts::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contacts::clear_time() {
  if (time_ != NULL) time_->::QRCS::msgs::Time::Clear();
  clear_has_time();
}
inline const ::QRCS::msgs::Time& Contacts::time() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contacts.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::QRCS::msgs::Time* Contacts::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::QRCS::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contacts.time)
  return time_;
}
inline ::QRCS::msgs::Time* Contacts::release_time() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contacts.time)
  clear_has_time();
  ::QRCS::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Contacts::set_allocated_time(::QRCS::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contacts.time)
}

// -------------------------------------------------------------------

// ContactSensors

// repeated .QRCS.msgs.Contacts contacts = 1;
inline int ContactSensors::contacts_size() const {
  return contacts_.size();
}
inline void ContactSensors::clear_contacts() {
  contacts_.Clear();
}
inline const ::QRCS::msgs::Contacts& ContactSensors::contacts(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.ContactSensors.contacts)
  return contacts_.Get(index);
}
inline ::QRCS::msgs::Contacts* ContactSensors::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.ContactSensors.contacts)
  return contacts_.Mutable(index);
}
inline ::QRCS::msgs::Contacts* ContactSensors::add_contacts() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.ContactSensors.contacts)
  return contacts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contacts >*
ContactSensors::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.ContactSensors.contacts)
  return &contacts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contacts >&
ContactSensors::contacts() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.ContactSensors.contacts)
  return contacts_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace QRCS

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contactsensors_2eproto__INCLUDED
