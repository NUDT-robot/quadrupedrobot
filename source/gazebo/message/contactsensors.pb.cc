// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactsensors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "include/gazebo/message/contactsensors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QRCS {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wrench_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wrench_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointWrench_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointWrench_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contact_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contacts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contacts_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactSensors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactSensors_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_contactsensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_contactsensors_2eproto() {
  protobuf_AddDesc_contactsensors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "contactsensors.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3d_descriptor_ = file->message_type(0);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::default_instance_,
      Vector3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vector3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _internal_metadata_),
      -1);
  Wrench_descriptor_ = file->message_type(1);
  static const int Wrench_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, force_offset_),
  };
  Wrench_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Wrench_descriptor_,
      Wrench::default_instance_,
      Wrench_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, _has_bits_[0]),
      -1,
      -1,
      sizeof(Wrench),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, _internal_metadata_),
      -1);
  JointWrench_descriptor_ = file->message_type(2);
  static const int JointWrench_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_1_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_1_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_2_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_2_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_1_wrench_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_2_wrench_),
  };
  JointWrench_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JointWrench_descriptor_,
      JointWrench::default_instance_,
      JointWrench_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, _has_bits_[0]),
      -1,
      -1,
      sizeof(JointWrench),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, _internal_metadata_),
      -1);
  Time_descriptor_ = file->message_type(3);
  static const int Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, nsec_),
  };
  Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _has_bits_[0]),
      -1,
      -1,
      sizeof(Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_),
      -1);
  Contact_descriptor_ = file->message_type(4);
  static const int Contact_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, collision1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, collision2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, wrench_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, world_),
  };
  Contact_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Contact_descriptor_,
      Contact::default_instance_,
      Contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _has_bits_[0]),
      -1,
      -1,
      sizeof(Contact),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _internal_metadata_),
      -1);
  Contacts_descriptor_ = file->message_type(5);
  static const int Contacts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, time_),
  };
  Contacts_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Contacts_descriptor_,
      Contacts::default_instance_,
      Contacts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, _has_bits_[0]),
      -1,
      -1,
      sizeof(Contacts),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, _internal_metadata_),
      -1);
  ContactSensors_descriptor_ = file->message_type(6);
  static const int ContactSensors_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSensors, contacts_),
  };
  ContactSensors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContactSensors_descriptor_,
      ContactSensors::default_instance_,
      ContactSensors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSensors, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContactSensors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSensors, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_contactsensors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3d_descriptor_, &Vector3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Wrench_descriptor_, &Wrench::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JointWrench_descriptor_, &JointWrench::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Contact_descriptor_, &Contact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Contacts_descriptor_, &Contacts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContactSensors_descriptor_, &ContactSensors::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_contactsensors_2eproto() {
  delete Vector3d::default_instance_;
  delete Vector3d_reflection_;
  delete Wrench::default_instance_;
  delete Wrench_reflection_;
  delete JointWrench::default_instance_;
  delete JointWrench_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
  delete Contact::default_instance_;
  delete Contact_reflection_;
  delete Contacts::default_instance_;
  delete Contacts_reflection_;
  delete ContactSensors::default_instance_;
  delete ContactSensors_reflection_;
}

void protobuf_AddDesc_contactsensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_contactsensors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024contactsensors.proto\022\tQRCS.msgs\"+\n\010Vec"
    "tor3d\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"|"
    "\n\006Wrench\022\"\n\005force\030\001 \002(\0132\023.QRCS.msgs.Vect"
    "or3d\022#\n\006torque\030\002 \002(\0132\023.QRCS.msgs.Vector3"
    "d\022)\n\014force_offset\030\003 \001(\0132\023.QRCS.msgs.Vect"
    "or3d\"\261\001\n\013JointWrench\022\023\n\013body_1_name\030\001 \002("
    "\t\022\021\n\tbody_1_id\030\002 \002(\r\022\023\n\013body_2_name\030\003 \002("
    "\t\022\021\n\tbody_2_id\030\004 \002(\r\022(\n\rbody_1_wrench\030\005 "
    "\002(\0132\021.QRCS.msgs.Wrench\022(\n\rbody_2_wrench\030"
    "\006 \002(\0132\021.QRCS.msgs.Wrench\"!\n\004Time\022\013\n\003sec\030"
    "\001 \002(\005\022\014\n\004nsec\030\002 \002(\005\"\342\001\n\007Contact\022\022\n\ncolli"
    "sion1\030\001 \002(\t\022\022\n\ncollision2\030\002 \002(\t\022%\n\010posit"
    "ion\030\003 \003(\0132\023.QRCS.msgs.Vector3d\022#\n\006normal"
    "\030\004 \003(\0132\023.QRCS.msgs.Vector3d\022\r\n\005depth\030\005 \003"
    "(\001\022&\n\006wrench\030\006 \003(\0132\026.QRCS.msgs.JointWren"
    "ch\022\035\n\004time\030\007 \002(\0132\017.QRCS.msgs.Time\022\r\n\005wor"
    "ld\030\010 \002(\t\"N\n\010Contacts\022#\n\007contact\030\001 \003(\0132\022."
    "QRCS.msgs.Contact\022\035\n\004time\030\002 \002(\0132\017.QRCS.m"
    "sgs.Time\"7\n\016ContactSensors\022%\n\010contacts\030\001"
    " \003(\0132\023.QRCS.msgs.Contacts", 785);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contactsensors.proto", &protobuf_RegisterTypes);
  Vector3d::default_instance_ = new Vector3d();
  Wrench::default_instance_ = new Wrench();
  JointWrench::default_instance_ = new JointWrench();
  Time::default_instance_ = new Time();
  Contact::default_instance_ = new Contact();
  Contacts::default_instance_ = new Contacts();
  ContactSensors::default_instance_ = new ContactSensors();
  Vector3d::default_instance_->InitAsDefaultInstance();
  Wrench::default_instance_->InitAsDefaultInstance();
  JointWrench::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  Contact::default_instance_->InitAsDefaultInstance();
  Contacts::default_instance_->InitAsDefaultInstance();
  ContactSensors::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_contactsensors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_contactsensors_2eproto {
  StaticDescriptorInitializer_contactsensors_2eproto() {
    protobuf_AddDesc_contactsensors_2eproto();
  }
} static_descriptor_initializer_contactsensors_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRCS.msgs.Vector3d)
}

void Vector3d::InitAsDefaultInstance() {
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRCS.msgs.Vector3d)
}

void Vector3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:QRCS.msgs.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contactsensors_2eproto();
  return *default_instance_;
}

Vector3d* Vector3d::default_instance_ = NULL;

Vector3d* Vector3d::New(::google::protobuf::Arena* arena) const {
  Vector3d* n = new Vector3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:QRCS.msgs.Vector3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRCS.msgs.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRCS.msgs.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRCS.msgs.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRCS.msgs.Vector3d)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRCS.msgs.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRCS.msgs.Vector3d)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRCS.msgs.Vector3d)
  return target;
}

int Vector3d::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:QRCS.msgs.Vector3d)
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int Vector3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRCS.msgs.Vector3d)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRCS.msgs.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRCS.msgs.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRCS.msgs.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRCS.msgs.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRCS.msgs.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRCS.msgs.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3d

// required double x = 1;
bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Vector3d.x)
  return x_;
}
 void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Vector3d.x)
}

// required double y = 2;
bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Vector3d.y)
  return y_;
}
 void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Vector3d.y)
}

// required double z = 3;
bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Vector3d.z)
  return z_;
}
 void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Vector3d.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wrench::kForceFieldNumber;
const int Wrench::kTorqueFieldNumber;
const int Wrench::kForceOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wrench::Wrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRCS.msgs.Wrench)
}

void Wrench::InitAsDefaultInstance() {
  force_ = const_cast< ::QRCS::msgs::Vector3d*>(&::QRCS::msgs::Vector3d::default_instance());
  torque_ = const_cast< ::QRCS::msgs::Vector3d*>(&::QRCS::msgs::Vector3d::default_instance());
  force_offset_ = const_cast< ::QRCS::msgs::Vector3d*>(&::QRCS::msgs::Vector3d::default_instance());
}

Wrench::Wrench(const Wrench& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRCS.msgs.Wrench)
}

void Wrench::SharedCtor() {
  _cached_size_ = 0;
  force_ = NULL;
  torque_ = NULL;
  force_offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:QRCS.msgs.Wrench)
  SharedDtor();
}

void Wrench::SharedDtor() {
  if (this != default_instance_) {
    delete force_;
    delete torque_;
    delete force_offset_;
  }
}

void Wrench::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wrench::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wrench_descriptor_;
}

const Wrench& Wrench::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contactsensors_2eproto();
  return *default_instance_;
}

Wrench* Wrench::default_instance_ = NULL;

Wrench* Wrench::New(::google::protobuf::Arena* arena) const {
  Wrench* n = new Wrench;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:QRCS.msgs.Wrench)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_force()) {
      if (force_ != NULL) force_->::QRCS::msgs::Vector3d::Clear();
    }
    if (has_torque()) {
      if (torque_ != NULL) torque_->::QRCS::msgs::Vector3d::Clear();
    }
    if (has_force_offset()) {
      if (force_offset_ != NULL) force_offset_->::QRCS::msgs::Vector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Wrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRCS.msgs.Wrench)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QRCS.msgs.Vector3d force = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_torque;
        break;
      }

      // required .QRCS.msgs.Vector3d torque = 2;
      case 2: {
        if (tag == 18) {
         parse_torque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torque()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_force_offset;
        break;
      }

      // optional .QRCS.msgs.Vector3d force_offset = 3;
      case 3: {
        if (tag == 26) {
         parse_force_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRCS.msgs.Wrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRCS.msgs.Wrench)
  return false;
#undef DO_
}

void Wrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRCS.msgs.Wrench)
  // required .QRCS.msgs.Vector3d force = 1;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->force_, output);
  }

  // required .QRCS.msgs.Vector3d torque = 2;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->torque_, output);
  }

  // optional .QRCS.msgs.Vector3d force_offset = 3;
  if (has_force_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->force_offset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRCS.msgs.Wrench)
}

::google::protobuf::uint8* Wrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRCS.msgs.Wrench)
  // required .QRCS.msgs.Vector3d force = 1;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->force_, false, target);
  }

  // required .QRCS.msgs.Vector3d torque = 2;
  if (has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->torque_, false, target);
  }

  // optional .QRCS.msgs.Vector3d force_offset = 3;
  if (has_force_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->force_offset_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRCS.msgs.Wrench)
  return target;
}

int Wrench::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:QRCS.msgs.Wrench)
  int total_size = 0;

  if (has_force()) {
    // required .QRCS.msgs.Vector3d force = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_);
  }

  if (has_torque()) {
    // required .QRCS.msgs.Vector3d torque = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torque_);
  }

  return total_size;
}
int Wrench::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRCS.msgs.Wrench)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .QRCS.msgs.Vector3d force = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_);

    // required .QRCS.msgs.Vector3d torque = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torque_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .QRCS.msgs.Vector3d force_offset = 3;
  if (has_force_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_offset_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRCS.msgs.Wrench)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Wrench* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Wrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRCS.msgs.Wrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRCS.msgs.Wrench)
    MergeFrom(*source);
  }
}

void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRCS.msgs.Wrench)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_force()) {
      mutable_force()->::QRCS::msgs::Vector3d::MergeFrom(from.force());
    }
    if (from.has_torque()) {
      mutable_torque()->::QRCS::msgs::Vector3d::MergeFrom(from.torque());
    }
    if (from.has_force_offset()) {
      mutable_force_offset()->::QRCS::msgs::Vector3d::MergeFrom(from.force_offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Wrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRCS.msgs.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRCS.msgs.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_force()) {
    if (!this->force_->IsInitialized()) return false;
  }
  if (has_torque()) {
    if (!this->torque_->IsInitialized()) return false;
  }
  if (has_force_offset()) {
    if (!this->force_offset_->IsInitialized()) return false;
  }
  return true;
}

void Wrench::Swap(Wrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wrench::InternalSwap(Wrench* other) {
  std::swap(force_, other->force_);
  std::swap(torque_, other->torque_);
  std::swap(force_offset_, other->force_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wrench::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wrench_descriptor_;
  metadata.reflection = Wrench_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wrench

// required .QRCS.msgs.Vector3d force = 1;
bool Wrench::has_force() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Wrench::set_has_force() {
  _has_bits_[0] |= 0x00000001u;
}
void Wrench::clear_has_force() {
  _has_bits_[0] &= ~0x00000001u;
}
void Wrench::clear_force() {
  if (force_ != NULL) force_->::QRCS::msgs::Vector3d::Clear();
  clear_has_force();
}
const ::QRCS::msgs::Vector3d& Wrench::force() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Wrench.force)
  return force_ != NULL ? *force_ : *default_instance_->force_;
}
::QRCS::msgs::Vector3d* Wrench::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::QRCS::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Wrench.force)
  return force_;
}
::QRCS::msgs::Vector3d* Wrench::release_force() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Wrench.force)
  clear_has_force();
  ::QRCS::msgs::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
void Wrench::set_allocated_force(::QRCS::msgs::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Wrench.force)
}

// required .QRCS.msgs.Vector3d torque = 2;
bool Wrench::has_torque() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Wrench::set_has_torque() {
  _has_bits_[0] |= 0x00000002u;
}
void Wrench::clear_has_torque() {
  _has_bits_[0] &= ~0x00000002u;
}
void Wrench::clear_torque() {
  if (torque_ != NULL) torque_->::QRCS::msgs::Vector3d::Clear();
  clear_has_torque();
}
const ::QRCS::msgs::Vector3d& Wrench::torque() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Wrench.torque)
  return torque_ != NULL ? *torque_ : *default_instance_->torque_;
}
::QRCS::msgs::Vector3d* Wrench::mutable_torque() {
  set_has_torque();
  if (torque_ == NULL) {
    torque_ = new ::QRCS::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Wrench.torque)
  return torque_;
}
::QRCS::msgs::Vector3d* Wrench::release_torque() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Wrench.torque)
  clear_has_torque();
  ::QRCS::msgs::Vector3d* temp = torque_;
  torque_ = NULL;
  return temp;
}
void Wrench::set_allocated_torque(::QRCS::msgs::Vector3d* torque) {
  delete torque_;
  torque_ = torque;
  if (torque) {
    set_has_torque();
  } else {
    clear_has_torque();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Wrench.torque)
}

// optional .QRCS.msgs.Vector3d force_offset = 3;
bool Wrench::has_force_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Wrench::set_has_force_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void Wrench::clear_has_force_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void Wrench::clear_force_offset() {
  if (force_offset_ != NULL) force_offset_->::QRCS::msgs::Vector3d::Clear();
  clear_has_force_offset();
}
const ::QRCS::msgs::Vector3d& Wrench::force_offset() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Wrench.force_offset)
  return force_offset_ != NULL ? *force_offset_ : *default_instance_->force_offset_;
}
::QRCS::msgs::Vector3d* Wrench::mutable_force_offset() {
  set_has_force_offset();
  if (force_offset_ == NULL) {
    force_offset_ = new ::QRCS::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Wrench.force_offset)
  return force_offset_;
}
::QRCS::msgs::Vector3d* Wrench::release_force_offset() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Wrench.force_offset)
  clear_has_force_offset();
  ::QRCS::msgs::Vector3d* temp = force_offset_;
  force_offset_ = NULL;
  return temp;
}
void Wrench::set_allocated_force_offset(::QRCS::msgs::Vector3d* force_offset) {
  delete force_offset_;
  force_offset_ = force_offset;
  if (force_offset) {
    set_has_force_offset();
  } else {
    clear_has_force_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Wrench.force_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointWrench::kBody1NameFieldNumber;
const int JointWrench::kBody1IdFieldNumber;
const int JointWrench::kBody2NameFieldNumber;
const int JointWrench::kBody2IdFieldNumber;
const int JointWrench::kBody1WrenchFieldNumber;
const int JointWrench::kBody2WrenchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointWrench::JointWrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRCS.msgs.JointWrench)
}

void JointWrench::InitAsDefaultInstance() {
  body_1_wrench_ = const_cast< ::QRCS::msgs::Wrench*>(&::QRCS::msgs::Wrench::default_instance());
  body_2_wrench_ = const_cast< ::QRCS::msgs::Wrench*>(&::QRCS::msgs::Wrench::default_instance());
}

JointWrench::JointWrench(const JointWrench& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRCS.msgs.JointWrench)
}

void JointWrench::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_1_id_ = 0u;
  body_2_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_2_id_ = 0u;
  body_1_wrench_ = NULL;
  body_2_wrench_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointWrench::~JointWrench() {
  // @@protoc_insertion_point(destructor:QRCS.msgs.JointWrench)
  SharedDtor();
}

void JointWrench::SharedDtor() {
  body_1_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_2_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete body_1_wrench_;
    delete body_2_wrench_;
  }
}

void JointWrench::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointWrench::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointWrench_descriptor_;
}

const JointWrench& JointWrench::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contactsensors_2eproto();
  return *default_instance_;
}

JointWrench* JointWrench::default_instance_ = NULL;

JointWrench* JointWrench::New(::google::protobuf::Arena* arena) const {
  JointWrench* n = new JointWrench;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JointWrench::Clear() {
// @@protoc_insertion_point(message_clear_start:QRCS.msgs.JointWrench)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JointWrench, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JointWrench*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(body_1_id_, body_2_id_);
    if (has_body_1_name()) {
      body_1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_body_2_name()) {
      body_2_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_body_1_wrench()) {
      if (body_1_wrench_ != NULL) body_1_wrench_->::QRCS::msgs::Wrench::Clear();
    }
    if (has_body_2_wrench()) {
      if (body_2_wrench_ != NULL) body_2_wrench_->::QRCS::msgs::Wrench::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool JointWrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRCS.msgs.JointWrench)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string body_1_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_1_name().data(), this->body_1_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QRCS.msgs.JointWrench.body_1_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_body_1_id;
        break;
      }

      // required uint32 body_1_id = 2;
      case 2: {
        if (tag == 16) {
         parse_body_1_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_1_id_)));
          set_has_body_1_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_body_2_name;
        break;
      }

      // required string body_2_name = 3;
      case 3: {
        if (tag == 26) {
         parse_body_2_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_2_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_2_name().data(), this->body_2_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QRCS.msgs.JointWrench.body_2_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_body_2_id;
        break;
      }

      // required uint32 body_2_id = 4;
      case 4: {
        if (tag == 32) {
         parse_body_2_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_2_id_)));
          set_has_body_2_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_body_1_wrench;
        break;
      }

      // required .QRCS.msgs.Wrench body_1_wrench = 5;
      case 5: {
        if (tag == 42) {
         parse_body_1_wrench:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_1_wrench()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_body_2_wrench;
        break;
      }

      // required .QRCS.msgs.Wrench body_2_wrench = 6;
      case 6: {
        if (tag == 50) {
         parse_body_2_wrench:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_2_wrench()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRCS.msgs.JointWrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRCS.msgs.JointWrench)
  return false;
#undef DO_
}

void JointWrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRCS.msgs.JointWrench)
  // required string body_1_name = 1;
  if (has_body_1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_1_name().data(), this->body_1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.JointWrench.body_1_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->body_1_name(), output);
  }

  // required uint32 body_1_id = 2;
  if (has_body_1_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->body_1_id(), output);
  }

  // required string body_2_name = 3;
  if (has_body_2_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_2_name().data(), this->body_2_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.JointWrench.body_2_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->body_2_name(), output);
  }

  // required uint32 body_2_id = 4;
  if (has_body_2_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->body_2_id(), output);
  }

  // required .QRCS.msgs.Wrench body_1_wrench = 5;
  if (has_body_1_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->body_1_wrench_, output);
  }

  // required .QRCS.msgs.Wrench body_2_wrench = 6;
  if (has_body_2_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->body_2_wrench_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRCS.msgs.JointWrench)
}

::google::protobuf::uint8* JointWrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRCS.msgs.JointWrench)
  // required string body_1_name = 1;
  if (has_body_1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_1_name().data(), this->body_1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.JointWrench.body_1_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->body_1_name(), target);
  }

  // required uint32 body_1_id = 2;
  if (has_body_1_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->body_1_id(), target);
  }

  // required string body_2_name = 3;
  if (has_body_2_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_2_name().data(), this->body_2_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.JointWrench.body_2_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body_2_name(), target);
  }

  // required uint32 body_2_id = 4;
  if (has_body_2_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->body_2_id(), target);
  }

  // required .QRCS.msgs.Wrench body_1_wrench = 5;
  if (has_body_1_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->body_1_wrench_, false, target);
  }

  // required .QRCS.msgs.Wrench body_2_wrench = 6;
  if (has_body_2_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->body_2_wrench_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRCS.msgs.JointWrench)
  return target;
}

int JointWrench::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:QRCS.msgs.JointWrench)
  int total_size = 0;

  if (has_body_1_name()) {
    // required string body_1_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_1_name());
  }

  if (has_body_1_id()) {
    // required uint32 body_1_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_1_id());
  }

  if (has_body_2_name()) {
    // required string body_2_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_2_name());
  }

  if (has_body_2_id()) {
    // required uint32 body_2_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_2_id());
  }

  if (has_body_1_wrench()) {
    // required .QRCS.msgs.Wrench body_1_wrench = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_1_wrench_);
  }

  if (has_body_2_wrench()) {
    // required .QRCS.msgs.Wrench body_2_wrench = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_2_wrench_);
  }

  return total_size;
}
int JointWrench::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRCS.msgs.JointWrench)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string body_1_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_1_name());

    // required uint32 body_1_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_1_id());

    // required string body_2_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_2_name());

    // required uint32 body_2_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_2_id());

    // required .QRCS.msgs.Wrench body_1_wrench = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_1_wrench_);

    // required .QRCS.msgs.Wrench body_2_wrench = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_2_wrench_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointWrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRCS.msgs.JointWrench)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JointWrench* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JointWrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRCS.msgs.JointWrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRCS.msgs.JointWrench)
    MergeFrom(*source);
  }
}

void JointWrench::MergeFrom(const JointWrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRCS.msgs.JointWrench)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body_1_name()) {
      set_has_body_1_name();
      body_1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_1_name_);
    }
    if (from.has_body_1_id()) {
      set_body_1_id(from.body_1_id());
    }
    if (from.has_body_2_name()) {
      set_has_body_2_name();
      body_2_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_2_name_);
    }
    if (from.has_body_2_id()) {
      set_body_2_id(from.body_2_id());
    }
    if (from.has_body_1_wrench()) {
      mutable_body_1_wrench()->::QRCS::msgs::Wrench::MergeFrom(from.body_1_wrench());
    }
    if (from.has_body_2_wrench()) {
      mutable_body_2_wrench()->::QRCS::msgs::Wrench::MergeFrom(from.body_2_wrench());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void JointWrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRCS.msgs.JointWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointWrench::CopyFrom(const JointWrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRCS.msgs.JointWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointWrench::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_body_1_wrench()) {
    if (!this->body_1_wrench_->IsInitialized()) return false;
  }
  if (has_body_2_wrench()) {
    if (!this->body_2_wrench_->IsInitialized()) return false;
  }
  return true;
}

void JointWrench::Swap(JointWrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointWrench::InternalSwap(JointWrench* other) {
  body_1_name_.Swap(&other->body_1_name_);
  std::swap(body_1_id_, other->body_1_id_);
  body_2_name_.Swap(&other->body_2_name_);
  std::swap(body_2_id_, other->body_2_id_);
  std::swap(body_1_wrench_, other->body_1_wrench_);
  std::swap(body_2_wrench_, other->body_2_wrench_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JointWrench::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointWrench_descriptor_;
  metadata.reflection = JointWrench_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JointWrench

// required string body_1_name = 1;
bool JointWrench::has_body_1_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JointWrench::set_has_body_1_name() {
  _has_bits_[0] |= 0x00000001u;
}
void JointWrench::clear_has_body_1_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void JointWrench::clear_body_1_name() {
  body_1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body_1_name();
}
 const ::std::string& JointWrench::body_1_name() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_1_name)
  return body_1_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JointWrench::set_body_1_name(const ::std::string& value) {
  set_has_body_1_name();
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_1_name)
}
 void JointWrench::set_body_1_name(const char* value) {
  set_has_body_1_name();
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.JointWrench.body_1_name)
}
 void JointWrench::set_body_1_name(const char* value, size_t size) {
  set_has_body_1_name();
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.JointWrench.body_1_name)
}
 ::std::string* JointWrench::mutable_body_1_name() {
  set_has_body_1_name();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_1_name)
  return body_1_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JointWrench::release_body_1_name() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_1_name)
  clear_has_body_1_name();
  return body_1_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JointWrench::set_allocated_body_1_name(::std::string* body_1_name) {
  if (body_1_name != NULL) {
    set_has_body_1_name();
  } else {
    clear_has_body_1_name();
  }
  body_1_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body_1_name);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_1_name)
}

// required uint32 body_1_id = 2;
bool JointWrench::has_body_1_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JointWrench::set_has_body_1_id() {
  _has_bits_[0] |= 0x00000002u;
}
void JointWrench::clear_has_body_1_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void JointWrench::clear_body_1_id() {
  body_1_id_ = 0u;
  clear_has_body_1_id();
}
 ::google::protobuf::uint32 JointWrench::body_1_id() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_1_id)
  return body_1_id_;
}
 void JointWrench::set_body_1_id(::google::protobuf::uint32 value) {
  set_has_body_1_id();
  body_1_id_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_1_id)
}

// required string body_2_name = 3;
bool JointWrench::has_body_2_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void JointWrench::set_has_body_2_name() {
  _has_bits_[0] |= 0x00000004u;
}
void JointWrench::clear_has_body_2_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void JointWrench::clear_body_2_name() {
  body_2_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body_2_name();
}
 const ::std::string& JointWrench::body_2_name() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_2_name)
  return body_2_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JointWrench::set_body_2_name(const ::std::string& value) {
  set_has_body_2_name();
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_2_name)
}
 void JointWrench::set_body_2_name(const char* value) {
  set_has_body_2_name();
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.JointWrench.body_2_name)
}
 void JointWrench::set_body_2_name(const char* value, size_t size) {
  set_has_body_2_name();
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.JointWrench.body_2_name)
}
 ::std::string* JointWrench::mutable_body_2_name() {
  set_has_body_2_name();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_2_name)
  return body_2_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JointWrench::release_body_2_name() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_2_name)
  clear_has_body_2_name();
  return body_2_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JointWrench::set_allocated_body_2_name(::std::string* body_2_name) {
  if (body_2_name != NULL) {
    set_has_body_2_name();
  } else {
    clear_has_body_2_name();
  }
  body_2_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body_2_name);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_2_name)
}

// required uint32 body_2_id = 4;
bool JointWrench::has_body_2_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void JointWrench::set_has_body_2_id() {
  _has_bits_[0] |= 0x00000008u;
}
void JointWrench::clear_has_body_2_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void JointWrench::clear_body_2_id() {
  body_2_id_ = 0u;
  clear_has_body_2_id();
}
 ::google::protobuf::uint32 JointWrench::body_2_id() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_2_id)
  return body_2_id_;
}
 void JointWrench::set_body_2_id(::google::protobuf::uint32 value) {
  set_has_body_2_id();
  body_2_id_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.JointWrench.body_2_id)
}

// required .QRCS.msgs.Wrench body_1_wrench = 5;
bool JointWrench::has_body_1_wrench() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void JointWrench::set_has_body_1_wrench() {
  _has_bits_[0] |= 0x00000010u;
}
void JointWrench::clear_has_body_1_wrench() {
  _has_bits_[0] &= ~0x00000010u;
}
void JointWrench::clear_body_1_wrench() {
  if (body_1_wrench_ != NULL) body_1_wrench_->::QRCS::msgs::Wrench::Clear();
  clear_has_body_1_wrench();
}
const ::QRCS::msgs::Wrench& JointWrench::body_1_wrench() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_1_wrench)
  return body_1_wrench_ != NULL ? *body_1_wrench_ : *default_instance_->body_1_wrench_;
}
::QRCS::msgs::Wrench* JointWrench::mutable_body_1_wrench() {
  set_has_body_1_wrench();
  if (body_1_wrench_ == NULL) {
    body_1_wrench_ = new ::QRCS::msgs::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_1_wrench)
  return body_1_wrench_;
}
::QRCS::msgs::Wrench* JointWrench::release_body_1_wrench() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_1_wrench)
  clear_has_body_1_wrench();
  ::QRCS::msgs::Wrench* temp = body_1_wrench_;
  body_1_wrench_ = NULL;
  return temp;
}
void JointWrench::set_allocated_body_1_wrench(::QRCS::msgs::Wrench* body_1_wrench) {
  delete body_1_wrench_;
  body_1_wrench_ = body_1_wrench;
  if (body_1_wrench) {
    set_has_body_1_wrench();
  } else {
    clear_has_body_1_wrench();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_1_wrench)
}

// required .QRCS.msgs.Wrench body_2_wrench = 6;
bool JointWrench::has_body_2_wrench() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void JointWrench::set_has_body_2_wrench() {
  _has_bits_[0] |= 0x00000020u;
}
void JointWrench::clear_has_body_2_wrench() {
  _has_bits_[0] &= ~0x00000020u;
}
void JointWrench::clear_body_2_wrench() {
  if (body_2_wrench_ != NULL) body_2_wrench_->::QRCS::msgs::Wrench::Clear();
  clear_has_body_2_wrench();
}
const ::QRCS::msgs::Wrench& JointWrench::body_2_wrench() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.JointWrench.body_2_wrench)
  return body_2_wrench_ != NULL ? *body_2_wrench_ : *default_instance_->body_2_wrench_;
}
::QRCS::msgs::Wrench* JointWrench::mutable_body_2_wrench() {
  set_has_body_2_wrench();
  if (body_2_wrench_ == NULL) {
    body_2_wrench_ = new ::QRCS::msgs::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.JointWrench.body_2_wrench)
  return body_2_wrench_;
}
::QRCS::msgs::Wrench* JointWrench::release_body_2_wrench() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.JointWrench.body_2_wrench)
  clear_has_body_2_wrench();
  ::QRCS::msgs::Wrench* temp = body_2_wrench_;
  body_2_wrench_ = NULL;
  return temp;
}
void JointWrench::set_allocated_body_2_wrench(::QRCS::msgs::Wrench* body_2_wrench) {
  delete body_2_wrench_;
  body_2_wrench_ = body_2_wrench;
  if (body_2_wrench) {
    set_has_body_2_wrench();
  } else {
    clear_has_body_2_wrench();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.JointWrench.body_2_wrench)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kSecFieldNumber;
const int Time::kNsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRCS.msgs.Time)
}

void Time::InitAsDefaultInstance() {
}

Time::Time(const Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRCS.msgs.Time)
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  sec_ = 0;
  nsec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:QRCS.msgs.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contactsensors_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:QRCS.msgs.Time)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Time, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Time*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sec_, nsec_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRCS.msgs.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nsec;
        break;
      }

      // required int32 nsec = 2;
      case 2: {
        if (tag == 16) {
         parse_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsec_)));
          set_has_nsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRCS.msgs.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRCS.msgs.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRCS.msgs.Time)
  // required int32 sec = 1;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sec(), output);
  }

  // required int32 nsec = 2;
  if (has_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRCS.msgs.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRCS.msgs.Time)
  // required int32 sec = 1;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sec(), target);
  }

  // required int32 nsec = 2;
  if (has_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRCS.msgs.Time)
  return target;
}

int Time::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:QRCS.msgs.Time)
  int total_size = 0;

  if (has_sec()) {
    // required int32 sec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sec());
  }

  if (has_nsec()) {
    // required int32 nsec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nsec());
  }

  return total_size;
}
int Time::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRCS.msgs.Time)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sec());

    // required int32 nsec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nsec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRCS.msgs.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Time* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRCS.msgs.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRCS.msgs.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRCS.msgs.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_nsec()) {
      set_nsec(from.nsec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRCS.msgs.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRCS.msgs.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  std::swap(sec_, other->sec_);
  std::swap(nsec_, other->nsec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// required int32 sec = 1;
bool Time::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Time::set_has_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void Time::clear_has_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void Time::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
 ::google::protobuf::int32 Time::sec() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Time.sec)
  return sec_;
}
 void Time::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Time.sec)
}

// required int32 nsec = 2;
bool Time::has_nsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Time::set_has_nsec() {
  _has_bits_[0] |= 0x00000002u;
}
void Time::clear_has_nsec() {
  _has_bits_[0] &= ~0x00000002u;
}
void Time::clear_nsec() {
  nsec_ = 0;
  clear_has_nsec();
}
 ::google::protobuf::int32 Time::nsec() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Time.nsec)
  return nsec_;
}
 void Time::set_nsec(::google::protobuf::int32 value) {
  set_has_nsec();
  nsec_ = value;
  // @@protoc_insertion_point(field_set:QRCS.msgs.Time.nsec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contact::kCollision1FieldNumber;
const int Contact::kCollision2FieldNumber;
const int Contact::kPositionFieldNumber;
const int Contact::kNormalFieldNumber;
const int Contact::kDepthFieldNumber;
const int Contact::kWrenchFieldNumber;
const int Contact::kTimeFieldNumber;
const int Contact::kWorldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contact::Contact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRCS.msgs.Contact)
}

void Contact::InitAsDefaultInstance() {
  time_ = const_cast< ::QRCS::msgs::Time*>(&::QRCS::msgs::Time::default_instance());
}

Contact::Contact(const Contact& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRCS.msgs.Contact)
}

void Contact::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  collision1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collision2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = NULL;
  world_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contact::~Contact() {
  // @@protoc_insertion_point(destructor:QRCS.msgs.Contact)
  SharedDtor();
}

void Contact::SharedDtor() {
  collision1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collision2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete time_;
  }
}

void Contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contact_descriptor_;
}

const Contact& Contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contactsensors_2eproto();
  return *default_instance_;
}

Contact* Contact::default_instance_ = NULL;

Contact* Contact::New(::google::protobuf::Arena* arena) const {
  Contact* n = new Contact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:QRCS.msgs.Contact)
  if (_has_bits_[0 / 32] & 195u) {
    if (has_collision1()) {
      collision1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_collision2()) {
      collision2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_time()) {
      if (time_ != NULL) time_->::QRCS::msgs::Time::Clear();
    }
    if (has_world()) {
      world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  position_.Clear();
  normal_.Clear();
  depth_.Clear();
  wrench_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRCS.msgs.Contact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string collision1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collision1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->collision1().data(), this->collision1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QRCS.msgs.Contact.collision1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collision2;
        break;
      }

      // required string collision2 = 2;
      case 2: {
        if (tag == 18) {
         parse_collision2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collision2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->collision2().data(), this->collision2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QRCS.msgs.Contact.collision2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // repeated .QRCS.msgs.Vector3d position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(input->IncrementRecursionDepth());
         parse_loop_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_position;
        if (input->ExpectTag(34)) goto parse_loop_normal;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .QRCS.msgs.Vector3d normal = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_normal;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(41)) goto parse_depth;
        break;
      }

      // repeated double depth = 5;
      case 5: {
        if (tag == 41) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_depth())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_depth())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_depth;
        if (input->ExpectTag(50)) goto parse_wrench;
        break;
      }

      // repeated .QRCS.msgs.JointWrench wrench = 6;
      case 6: {
        if (tag == 50) {
         parse_wrench:
          DO_(input->IncrementRecursionDepth());
         parse_loop_wrench:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wrench()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_wrench;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_time;
        break;
      }

      // required .QRCS.msgs.Time time = 7;
      case 7: {
        if (tag == 58) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_world;
        break;
      }

      // required string world = 8;
      case 8: {
        if (tag == 66) {
         parse_world:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->world().data(), this->world().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QRCS.msgs.Contact.world");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRCS.msgs.Contact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRCS.msgs.Contact)
  return false;
#undef DO_
}

void Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRCS.msgs.Contact)
  // required string collision1 = 1;
  if (has_collision1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collision1().data(), this->collision1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.Contact.collision1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collision1(), output);
  }

  // required string collision2 = 2;
  if (has_collision2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collision2().data(), this->collision2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.Contact.collision2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collision2(), output);
  }

  // repeated .QRCS.msgs.Vector3d position = 3;
  for (unsigned int i = 0, n = this->position_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(i), output);
  }

  // repeated .QRCS.msgs.Vector3d normal = 4;
  for (unsigned int i = 0, n = this->normal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->normal(i), output);
  }

  // repeated double depth = 5;
  for (int i = 0; i < this->depth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->depth(i), output);
  }

  // repeated .QRCS.msgs.JointWrench wrench = 6;
  for (unsigned int i = 0, n = this->wrench_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wrench(i), output);
  }

  // required .QRCS.msgs.Time time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->time_, output);
  }

  // required string world = 8;
  if (has_world()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.Contact.world");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->world(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRCS.msgs.Contact)
}

::google::protobuf::uint8* Contact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRCS.msgs.Contact)
  // required string collision1 = 1;
  if (has_collision1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collision1().data(), this->collision1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.Contact.collision1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collision1(), target);
  }

  // required string collision2 = 2;
  if (has_collision2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collision2().data(), this->collision2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.Contact.collision2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collision2(), target);
  }

  // repeated .QRCS.msgs.Vector3d position = 3;
  for (unsigned int i = 0, n = this->position_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->position(i), false, target);
  }

  // repeated .QRCS.msgs.Vector3d normal = 4;
  for (unsigned int i = 0, n = this->normal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->normal(i), false, target);
  }

  // repeated double depth = 5;
  for (int i = 0; i < this->depth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->depth(i), target);
  }

  // repeated .QRCS.msgs.JointWrench wrench = 6;
  for (unsigned int i = 0, n = this->wrench_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->wrench(i), false, target);
  }

  // required .QRCS.msgs.Time time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->time_, false, target);
  }

  // required string world = 8;
  if (has_world()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QRCS.msgs.Contact.world");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->world(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRCS.msgs.Contact)
  return target;
}

int Contact::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:QRCS.msgs.Contact)
  int total_size = 0;

  if (has_collision1()) {
    // required string collision1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collision1());
  }

  if (has_collision2()) {
    // required string collision2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collision2());
  }

  if (has_time()) {
    // required .QRCS.msgs.Time time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  if (has_world()) {
    // required string world = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->world());
  }

  return total_size;
}
int Contact::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRCS.msgs.Contact)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000c3) ^ 0x000000c3) == 0) {  // All required fields are present.
    // required string collision1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collision1());

    // required string collision2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collision2());

    // required .QRCS.msgs.Time time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);

    // required string world = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->world());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .QRCS.msgs.Vector3d position = 3;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }

  // repeated .QRCS.msgs.Vector3d normal = 4;
  total_size += 1 * this->normal_size();
  for (int i = 0; i < this->normal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal(i));
  }

  // repeated double depth = 5;
  {
    int data_size = 0;
    data_size = 8 * this->depth_size();
    total_size += 1 * this->depth_size() + data_size;
  }

  // repeated .QRCS.msgs.JointWrench wrench = 6;
  total_size += 1 * this->wrench_size();
  for (int i = 0; i < this->wrench_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wrench(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRCS.msgs.Contact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Contact* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Contact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRCS.msgs.Contact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRCS.msgs.Contact)
    MergeFrom(*source);
  }
}

void Contact::MergeFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRCS.msgs.Contact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  position_.MergeFrom(from.position_);
  normal_.MergeFrom(from.normal_);
  depth_.MergeFrom(from.depth_);
  wrench_.MergeFrom(from.wrench_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collision1()) {
      set_has_collision1();
      collision1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collision1_);
    }
    if (from.has_collision2()) {
      set_has_collision2();
      collision2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collision2_);
    }
    if (from.has_time()) {
      mutable_time()->::QRCS::msgs::Time::MergeFrom(from.time());
    }
    if (from.has_world()) {
      set_has_world();
      world_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.world_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Contact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRCS.msgs.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contact::CopyFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRCS.msgs.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->normal())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wrench())) return false;
  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  return true;
}

void Contact::Swap(Contact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Contact::InternalSwap(Contact* other) {
  collision1_.Swap(&other->collision1_);
  collision2_.Swap(&other->collision2_);
  position_.UnsafeArenaSwap(&other->position_);
  normal_.UnsafeArenaSwap(&other->normal_);
  depth_.UnsafeArenaSwap(&other->depth_);
  wrench_.UnsafeArenaSwap(&other->wrench_);
  std::swap(time_, other->time_);
  world_.Swap(&other->world_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contact_descriptor_;
  metadata.reflection = Contact_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Contact

// required string collision1 = 1;
bool Contact::has_collision1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Contact::set_has_collision1() {
  _has_bits_[0] |= 0x00000001u;
}
void Contact::clear_has_collision1() {
  _has_bits_[0] &= ~0x00000001u;
}
void Contact::clear_collision1() {
  collision1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision1();
}
 const ::std::string& Contact::collision1() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.collision1)
  return collision1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_collision1(const ::std::string& value) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.collision1)
}
 void Contact::set_collision1(const char* value) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.Contact.collision1)
}
 void Contact::set_collision1(const char* value, size_t size) {
  set_has_collision1();
  collision1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.Contact.collision1)
}
 ::std::string* Contact::mutable_collision1() {
  set_has_collision1();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.collision1)
  return collision1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contact::release_collision1() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.collision1)
  clear_has_collision1();
  return collision1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_allocated_collision1(::std::string* collision1) {
  if (collision1 != NULL) {
    set_has_collision1();
  } else {
    clear_has_collision1();
  }
  collision1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision1);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.collision1)
}

// required string collision2 = 2;
bool Contact::has_collision2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Contact::set_has_collision2() {
  _has_bits_[0] |= 0x00000002u;
}
void Contact::clear_has_collision2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Contact::clear_collision2() {
  collision2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collision2();
}
 const ::std::string& Contact::collision2() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.collision2)
  return collision2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_collision2(const ::std::string& value) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.collision2)
}
 void Contact::set_collision2(const char* value) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.Contact.collision2)
}
 void Contact::set_collision2(const char* value, size_t size) {
  set_has_collision2();
  collision2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.Contact.collision2)
}
 ::std::string* Contact::mutable_collision2() {
  set_has_collision2();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.collision2)
  return collision2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contact::release_collision2() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.collision2)
  clear_has_collision2();
  return collision2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_allocated_collision2(::std::string* collision2) {
  if (collision2 != NULL) {
    set_has_collision2();
  } else {
    clear_has_collision2();
  }
  collision2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collision2);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.collision2)
}

// repeated .QRCS.msgs.Vector3d position = 3;
int Contact::position_size() const {
  return position_.size();
}
void Contact::clear_position() {
  position_.Clear();
}
const ::QRCS::msgs::Vector3d& Contact::position(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.position)
  return position_.Get(index);
}
::QRCS::msgs::Vector3d* Contact::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.position)
  return position_.Mutable(index);
}
::QRCS::msgs::Vector3d* Contact::add_position() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.position)
  return position_.Add();
}
::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >*
Contact::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.position)
  return &position_;
}
const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >&
Contact::position() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.position)
  return position_;
}

// repeated .QRCS.msgs.Vector3d normal = 4;
int Contact::normal_size() const {
  return normal_.size();
}
void Contact::clear_normal() {
  normal_.Clear();
}
const ::QRCS::msgs::Vector3d& Contact::normal(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.normal)
  return normal_.Get(index);
}
::QRCS::msgs::Vector3d* Contact::mutable_normal(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.normal)
  return normal_.Mutable(index);
}
::QRCS::msgs::Vector3d* Contact::add_normal() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.normal)
  return normal_.Add();
}
::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >*
Contact::mutable_normal() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.normal)
  return &normal_;
}
const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Vector3d >&
Contact::normal() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.normal)
  return normal_;
}

// repeated double depth = 5;
int Contact::depth_size() const {
  return depth_.size();
}
void Contact::clear_depth() {
  depth_.Clear();
}
 double Contact::depth(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.depth)
  return depth_.Get(index);
}
 void Contact::set_depth(int index, double value) {
  depth_.Set(index, value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.depth)
}
 void Contact::add_depth(double value) {
  depth_.Add(value);
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.depth)
}
 const ::google::protobuf::RepeatedField< double >&
Contact::depth() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.depth)
  return depth_;
}
 ::google::protobuf::RepeatedField< double >*
Contact::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.depth)
  return &depth_;
}

// repeated .QRCS.msgs.JointWrench wrench = 6;
int Contact::wrench_size() const {
  return wrench_.size();
}
void Contact::clear_wrench() {
  wrench_.Clear();
}
const ::QRCS::msgs::JointWrench& Contact::wrench(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.wrench)
  return wrench_.Get(index);
}
::QRCS::msgs::JointWrench* Contact::mutable_wrench(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.wrench)
  return wrench_.Mutable(index);
}
::QRCS::msgs::JointWrench* Contact::add_wrench() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contact.wrench)
  return wrench_.Add();
}
::google::protobuf::RepeatedPtrField< ::QRCS::msgs::JointWrench >*
Contact::mutable_wrench() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contact.wrench)
  return &wrench_;
}
const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::JointWrench >&
Contact::wrench() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contact.wrench)
  return wrench_;
}

// required .QRCS.msgs.Time time = 7;
bool Contact::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Contact::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Contact::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Contact::clear_time() {
  if (time_ != NULL) time_->::QRCS::msgs::Time::Clear();
  clear_has_time();
}
const ::QRCS::msgs::Time& Contact::time() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::QRCS::msgs::Time* Contact::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::QRCS::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.time)
  return time_;
}
::QRCS::msgs::Time* Contact::release_time() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.time)
  clear_has_time();
  ::QRCS::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
void Contact::set_allocated_time(::QRCS::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.time)
}

// required string world = 8;
bool Contact::has_world() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Contact::set_has_world() {
  _has_bits_[0] |= 0x00000080u;
}
void Contact::clear_has_world() {
  _has_bits_[0] &= ~0x00000080u;
}
void Contact::clear_world() {
  world_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_world();
}
 const ::std::string& Contact::world() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contact.world)
  return world_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_world(const ::std::string& value) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QRCS.msgs.Contact.world)
}
 void Contact::set_world(const char* value) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QRCS.msgs.Contact.world)
}
 void Contact::set_world(const char* value, size_t size) {
  set_has_world();
  world_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QRCS.msgs.Contact.world)
}
 ::std::string* Contact::mutable_world() {
  set_has_world();
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contact.world)
  return world_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contact::release_world() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contact.world)
  clear_has_world();
  return world_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_allocated_world(::std::string* world) {
  if (world != NULL) {
    set_has_world();
  } else {
    clear_has_world();
  }
  world_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), world);
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contact.world)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contacts::kContactFieldNumber;
const int Contacts::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contacts::Contacts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRCS.msgs.Contacts)
}

void Contacts::InitAsDefaultInstance() {
  time_ = const_cast< ::QRCS::msgs::Time*>(&::QRCS::msgs::Time::default_instance());
}

Contacts::Contacts(const Contacts& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRCS.msgs.Contacts)
}

void Contacts::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contacts::~Contacts() {
  // @@protoc_insertion_point(destructor:QRCS.msgs.Contacts)
  SharedDtor();
}

void Contacts::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void Contacts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contacts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contacts_descriptor_;
}

const Contacts& Contacts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contactsensors_2eproto();
  return *default_instance_;
}

Contacts* Contacts::default_instance_ = NULL;

Contacts* Contacts::New(::google::protobuf::Arena* arena) const {
  Contacts* n = new Contacts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Contacts::Clear() {
// @@protoc_insertion_point(message_clear_start:QRCS.msgs.Contacts)
  if (has_time()) {
    if (time_ != NULL) time_->::QRCS::msgs::Time::Clear();
  }
  contact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Contacts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRCS.msgs.Contacts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QRCS.msgs.Contact contact = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_contact;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // required .QRCS.msgs.Time time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRCS.msgs.Contacts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRCS.msgs.Contacts)
  return false;
#undef DO_
}

void Contacts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRCS.msgs.Contacts)
  // repeated .QRCS.msgs.Contact contact = 1;
  for (unsigned int i = 0, n = this->contact_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contact(i), output);
  }

  // required .QRCS.msgs.Time time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRCS.msgs.Contacts)
}

::google::protobuf::uint8* Contacts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRCS.msgs.Contacts)
  // repeated .QRCS.msgs.Contact contact = 1;
  for (unsigned int i = 0, n = this->contact_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->contact(i), false, target);
  }

  // required .QRCS.msgs.Time time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRCS.msgs.Contacts)
  return target;
}

int Contacts::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRCS.msgs.Contacts)
  int total_size = 0;

  // required .QRCS.msgs.Time time = 2;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }
  // repeated .QRCS.msgs.Contact contact = 1;
  total_size += 1 * this->contact_size();
  for (int i = 0; i < this->contact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contacts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRCS.msgs.Contacts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Contacts* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Contacts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRCS.msgs.Contacts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRCS.msgs.Contacts)
    MergeFrom(*source);
  }
}

void Contacts::MergeFrom(const Contacts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRCS.msgs.Contacts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  contact_.MergeFrom(from.contact_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time()) {
      mutable_time()->::QRCS::msgs::Time::MergeFrom(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Contacts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRCS.msgs.Contacts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contacts::CopyFrom(const Contacts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRCS.msgs.Contacts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contacts::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->contact())) return false;
  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  return true;
}

void Contacts::Swap(Contacts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Contacts::InternalSwap(Contacts* other) {
  contact_.UnsafeArenaSwap(&other->contact_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Contacts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contacts_descriptor_;
  metadata.reflection = Contacts_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Contacts

// repeated .QRCS.msgs.Contact contact = 1;
int Contacts::contact_size() const {
  return contact_.size();
}
void Contacts::clear_contact() {
  contact_.Clear();
}
const ::QRCS::msgs::Contact& Contacts::contact(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contacts.contact)
  return contact_.Get(index);
}
::QRCS::msgs::Contact* Contacts::mutable_contact(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contacts.contact)
  return contact_.Mutable(index);
}
::QRCS::msgs::Contact* Contacts::add_contact() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.Contacts.contact)
  return contact_.Add();
}
::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contact >*
Contacts::mutable_contact() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.Contacts.contact)
  return &contact_;
}
const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contact >&
Contacts::contact() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.Contacts.contact)
  return contact_;
}

// required .QRCS.msgs.Time time = 2;
bool Contacts::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Contacts::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Contacts::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Contacts::clear_time() {
  if (time_ != NULL) time_->::QRCS::msgs::Time::Clear();
  clear_has_time();
}
const ::QRCS::msgs::Time& Contacts::time() const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.Contacts.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::QRCS::msgs::Time* Contacts::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::QRCS::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.Contacts.time)
  return time_;
}
::QRCS::msgs::Time* Contacts::release_time() {
  // @@protoc_insertion_point(field_release:QRCS.msgs.Contacts.time)
  clear_has_time();
  ::QRCS::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
void Contacts::set_allocated_time(::QRCS::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:QRCS.msgs.Contacts.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactSensors::kContactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactSensors::ContactSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRCS.msgs.ContactSensors)
}

void ContactSensors::InitAsDefaultInstance() {
}

ContactSensors::ContactSensors(const ContactSensors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRCS.msgs.ContactSensors)
}

void ContactSensors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactSensors::~ContactSensors() {
  // @@protoc_insertion_point(destructor:QRCS.msgs.ContactSensors)
  SharedDtor();
}

void ContactSensors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactSensors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactSensors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactSensors_descriptor_;
}

const ContactSensors& ContactSensors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contactsensors_2eproto();
  return *default_instance_;
}

ContactSensors* ContactSensors::default_instance_ = NULL;

ContactSensors* ContactSensors::New(::google::protobuf::Arena* arena) const {
  ContactSensors* n = new ContactSensors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactSensors::Clear() {
// @@protoc_insertion_point(message_clear_start:QRCS.msgs.ContactSensors)
  contacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContactSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRCS.msgs.ContactSensors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QRCS.msgs.Contacts contacts = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_contacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_contacts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRCS.msgs.ContactSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRCS.msgs.ContactSensors)
  return false;
#undef DO_
}

void ContactSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRCS.msgs.ContactSensors)
  // repeated .QRCS.msgs.Contacts contacts = 1;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contacts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRCS.msgs.ContactSensors)
}

::google::protobuf::uint8* ContactSensors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRCS.msgs.ContactSensors)
  // repeated .QRCS.msgs.Contacts contacts = 1;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->contacts(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRCS.msgs.ContactSensors)
  return target;
}

int ContactSensors::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRCS.msgs.ContactSensors)
  int total_size = 0;

  // repeated .QRCS.msgs.Contacts contacts = 1;
  total_size += 1 * this->contacts_size();
  for (int i = 0; i < this->contacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contacts(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactSensors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRCS.msgs.ContactSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContactSensors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactSensors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRCS.msgs.ContactSensors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRCS.msgs.ContactSensors)
    MergeFrom(*source);
  }
}

void ContactSensors::MergeFrom(const ContactSensors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRCS.msgs.ContactSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  contacts_.MergeFrom(from.contacts_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContactSensors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRCS.msgs.ContactSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactSensors::CopyFrom(const ContactSensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRCS.msgs.ContactSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactSensors::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->contacts())) return false;
  return true;
}

void ContactSensors::Swap(ContactSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactSensors::InternalSwap(ContactSensors* other) {
  contacts_.UnsafeArenaSwap(&other->contacts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactSensors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactSensors_descriptor_;
  metadata.reflection = ContactSensors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactSensors

// repeated .QRCS.msgs.Contacts contacts = 1;
int ContactSensors::contacts_size() const {
  return contacts_.size();
}
void ContactSensors::clear_contacts() {
  contacts_.Clear();
}
const ::QRCS::msgs::Contacts& ContactSensors::contacts(int index) const {
  // @@protoc_insertion_point(field_get:QRCS.msgs.ContactSensors.contacts)
  return contacts_.Get(index);
}
::QRCS::msgs::Contacts* ContactSensors::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:QRCS.msgs.ContactSensors.contacts)
  return contacts_.Mutable(index);
}
::QRCS::msgs::Contacts* ContactSensors::add_contacts() {
  // @@protoc_insertion_point(field_add:QRCS.msgs.ContactSensors.contacts)
  return contacts_.Add();
}
::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contacts >*
ContactSensors::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:QRCS.msgs.ContactSensors.contacts)
  return &contacts_;
}
const ::google::protobuf::RepeatedPtrField< ::QRCS::msgs::Contacts >&
ContactSensors::contacts() const {
  // @@protoc_insertion_point(field_list:QRCS.msgs.ContactSensors.contacts)
  return contacts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace QRCS

// @@protoc_insertion_point(global_scope)
