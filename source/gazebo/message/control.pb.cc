// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "include/gazebo/message/control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QRcommand {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_control_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_control_2eproto() {
  protobuf_AddDesc_control_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "control.proto");
  GOOGLE_CHECK(file != NULL);
  Control_descriptor_ = file->message_type(0);
  static const int Control_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, type_),
  };
  Control_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Control_descriptor_,
      Control::default_instance_,
      Control_offsets_,
      -1,
      -1,
      -1,
      sizeof(Control),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_control_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Control_descriptor_, &Control::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_control_2eproto() {
  delete Control::default_instance_;
  delete Control_reflection_;
}

void protobuf_AddDesc_control_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_control_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcontrol.proto\022\016QRcommand.msgs\"G\n\007Contr"
    "ol\022\014\n\004mode\030\001 \003(\005\022\020\n\010position\030\002 \003(\001\022\016\n\006to"
    "rque\030\003 \003(\001\022\014\n\004type\030\004 \001(\005b\006proto3", 112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control.proto", &protobuf_RegisterTypes);
  Control::default_instance_ = new Control();
  Control::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_control_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_control_2eproto {
  StaticDescriptorInitializer_control_2eproto() {
    protobuf_AddDesc_control_2eproto();
  }
} static_descriptor_initializer_control_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control::kModeFieldNumber;
const int Control::kPositionFieldNumber;
const int Control::kTorqueFieldNumber;
const int Control::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control::Control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRcommand.msgs.Control)
}

void Control::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Control::Control(const Control& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRcommand.msgs.Control)
}

void Control::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:QRcommand.msgs.Control)
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const Control& Control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_control_2eproto();
  return *default_instance_;
}

Control* Control::default_instance_ = NULL;

Control* Control::New(::google::protobuf::Arena* arena) const {
  Control* n = new Control;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:QRcommand.msgs.Control)
  type_ = 0;
  mode_.Clear();
  position_.Clear();
  torque_.Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRcommand.msgs.Control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 mode = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mode())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_mode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_torque;
        break;
      }

      // repeated double torque = 3;
      case 3: {
        if (tag == 26) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_torque())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_torque())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRcommand.msgs.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRcommand.msgs.Control)
  return false;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRcommand.msgs.Control)
  // repeated int32 mode = 1;
  if (this->mode_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mode_cached_byte_size_);
  }
  for (int i = 0; i < this->mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mode(i), output);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->position(i), output);
  }

  // repeated double torque = 3;
  if (this->torque_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_torque_cached_byte_size_);
  }
  for (int i = 0; i < this->torque_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->torque(i), output);
  }

  // optional int32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:QRcommand.msgs.Control)
}

::google::protobuf::uint8* Control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRcommand.msgs.Control)
  // repeated int32 mode = 1;
  if (this->mode_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mode_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mode(i), target);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position(i), target);
  }

  // repeated double torque = 3;
  if (this->torque_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _torque_cached_byte_size_, target);
  }
  for (int i = 0; i < this->torque_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->torque(i), target);
  }

  // optional int32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QRcommand.msgs.Control)
  return target;
}

int Control::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRcommand.msgs.Control)
  int total_size = 0;

  // optional int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // repeated int32 mode = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mode(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mode_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double position = 2;
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double torque = 3;
  {
    int data_size = 0;
    data_size = 8 * this->torque_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _torque_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRcommand.msgs.Control)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Control* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRcommand.msgs.Control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRcommand.msgs.Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRcommand.msgs.Control)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mode_.MergeFrom(from.mode_);
  position_.MergeFrom(from.position_);
  torque_.MergeFrom(from.torque_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRcommand.msgs.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRcommand.msgs.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {

  return true;
}

void Control::Swap(Control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control::InternalSwap(Control* other) {
  mode_.UnsafeArenaSwap(&other->mode_);
  position_.UnsafeArenaSwap(&other->position_);
  torque_.UnsafeArenaSwap(&other->torque_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_descriptor_;
  metadata.reflection = Control_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control

// repeated int32 mode = 1;
int Control::mode_size() const {
  return mode_.size();
}
void Control::clear_mode() {
  mode_.Clear();
}
 ::google::protobuf::int32 Control::mode(int index) const {
  // @@protoc_insertion_point(field_get:QRcommand.msgs.Control.mode)
  return mode_.Get(index);
}
 void Control::set_mode(int index, ::google::protobuf::int32 value) {
  mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:QRcommand.msgs.Control.mode)
}
 void Control::add_mode(::google::protobuf::int32 value) {
  mode_.Add(value);
  // @@protoc_insertion_point(field_add:QRcommand.msgs.Control.mode)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Control::mode() const {
  // @@protoc_insertion_point(field_list:QRcommand.msgs.Control.mode)
  return mode_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Control::mutable_mode() {
  // @@protoc_insertion_point(field_mutable_list:QRcommand.msgs.Control.mode)
  return &mode_;
}

// repeated double position = 2;
int Control::position_size() const {
  return position_.size();
}
void Control::clear_position() {
  position_.Clear();
}
 double Control::position(int index) const {
  // @@protoc_insertion_point(field_get:QRcommand.msgs.Control.position)
  return position_.Get(index);
}
 void Control::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:QRcommand.msgs.Control.position)
}
 void Control::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:QRcommand.msgs.Control.position)
}
 const ::google::protobuf::RepeatedField< double >&
Control::position() const {
  // @@protoc_insertion_point(field_list:QRcommand.msgs.Control.position)
  return position_;
}
 ::google::protobuf::RepeatedField< double >*
Control::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:QRcommand.msgs.Control.position)
  return &position_;
}

// repeated double torque = 3;
int Control::torque_size() const {
  return torque_.size();
}
void Control::clear_torque() {
  torque_.Clear();
}
 double Control::torque(int index) const {
  // @@protoc_insertion_point(field_get:QRcommand.msgs.Control.torque)
  return torque_.Get(index);
}
 void Control::set_torque(int index, double value) {
  torque_.Set(index, value);
  // @@protoc_insertion_point(field_set:QRcommand.msgs.Control.torque)
}
 void Control::add_torque(double value) {
  torque_.Add(value);
  // @@protoc_insertion_point(field_add:QRcommand.msgs.Control.torque)
}
 const ::google::protobuf::RepeatedField< double >&
Control::torque() const {
  // @@protoc_insertion_point(field_list:QRcommand.msgs.Control.torque)
  return torque_;
}
 ::google::protobuf::RepeatedField< double >*
Control::mutable_torque() {
  // @@protoc_insertion_point(field_mutable_list:QRcommand.msgs.Control.torque)
  return &torque_;
}

// optional int32 type = 4;
void Control::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 Control::type() const {
  // @@protoc_insertion_point(field_get:QRcommand.msgs.Control.type)
  return type_;
}
 void Control::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:QRcommand.msgs.Control.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace QRcommand

// @@protoc_insertion_point(global_scope)
