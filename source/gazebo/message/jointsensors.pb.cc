// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jointsensors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "include/gazebo/message/jointsensors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QRsensor {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wrench_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wrench_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceTorque_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceTorque_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllJointSensors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllJointSensors_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_jointsensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_jointsensors_2eproto() {
  protobuf_AddDesc_jointsensors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "jointsensors.proto");
  GOOGLE_CHECK(file != NULL);
  Time_descriptor_ = file->message_type(0);
  static const int Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, nsec_),
  };
  Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      -1,
      -1,
      -1,
      sizeof(Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _is_default_instance_));
  Vector3d_descriptor_ = file->message_type(1);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::default_instance_,
      Vector3d_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _is_default_instance_));
  Wrench_descriptor_ = file->message_type(2);
  static const int Wrench_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, force_offset_),
  };
  Wrench_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Wrench_descriptor_,
      Wrench::default_instance_,
      Wrench_offsets_,
      -1,
      -1,
      -1,
      sizeof(Wrench),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, _is_default_instance_));
  ForceTorque_descriptor_ = file->message_type(3);
  static const int ForceTorque_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceTorque, wrench_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceTorque, time_),
  };
  ForceTorque_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForceTorque_descriptor_,
      ForceTorque::default_instance_,
      ForceTorque_offsets_,
      -1,
      -1,
      -1,
      sizeof(ForceTorque),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceTorque, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceTorque, _is_default_instance_));
  AllJointSensors_descriptor_ = file->message_type(4);
  static const int AllJointSensors_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllJointSensors, jointwrench_),
  };
  AllJointSensors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllJointSensors_descriptor_,
      AllJointSensors::default_instance_,
      AllJointSensors_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllJointSensors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllJointSensors, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllJointSensors, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_jointsensors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3d_descriptor_, &Vector3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Wrench_descriptor_, &Wrench::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForceTorque_descriptor_, &ForceTorque::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllJointSensors_descriptor_, &AllJointSensors::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_jointsensors_2eproto() {
  delete Time::default_instance_;
  delete Time_reflection_;
  delete Vector3d::default_instance_;
  delete Vector3d_reflection_;
  delete Wrench::default_instance_;
  delete Wrench_reflection_;
  delete ForceTorque::default_instance_;
  delete ForceTorque_reflection_;
  delete AllJointSensors::default_instance_;
  delete AllJointSensors_reflection_;
}

void protobuf_AddDesc_jointsensors_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_jointsensors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022jointsensors.proto\022\rQRsensor.msgs\"!\n\004T"
    "ime\022\013\n\003sec\030\001 \001(\005\022\014\n\004nsec\030\002 \001(\005\"+\n\010Vector"
    "3d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\210\001\n\006"
    "Wrench\022&\n\005force\030\001 \001(\0132\027.QRsensor.msgs.Ve"
    "ctor3d\022\'\n\006torque\030\002 \001(\0132\027.QRsensor.msgs.V"
    "ector3d\022-\n\014force_offset\030\003 \001(\0132\027.QRsensor"
    ".msgs.Vector3d\"W\n\013ForceTorque\022%\n\006wrench\030"
    "\001 \001(\0132\025.QRsensor.msgs.Wrench\022!\n\004time\030\002 \001"
    "(\0132\023.QRsensor.msgs.Time\"B\n\017AllJointSenso"
    "rs\022/\n\013jointwrench\030\001 \003(\0132\032.QRsensor.msgs."
    "ForceTorqueb\006proto3", 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "jointsensors.proto", &protobuf_RegisterTypes);
  Time::default_instance_ = new Time();
  Vector3d::default_instance_ = new Vector3d();
  Wrench::default_instance_ = new Wrench();
  ForceTorque::default_instance_ = new ForceTorque();
  AllJointSensors::default_instance_ = new AllJointSensors();
  Time::default_instance_->InitAsDefaultInstance();
  Vector3d::default_instance_->InitAsDefaultInstance();
  Wrench::default_instance_->InitAsDefaultInstance();
  ForceTorque::default_instance_->InitAsDefaultInstance();
  AllJointSensors::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jointsensors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_jointsensors_2eproto {
  StaticDescriptorInitializer_jointsensors_2eproto() {
    protobuf_AddDesc_jointsensors_2eproto();
  }
} static_descriptor_initializer_jointsensors_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kSecFieldNumber;
const int Time::kNsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRsensor.msgs.Time)
}

void Time::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Time::Time(const Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRsensor.msgs.Time)
}

void Time::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sec_ = 0;
  nsec_ = 0;
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:QRsensor.msgs.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jointsensors_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:QRsensor.msgs.Time)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Time, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Time*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sec_, nsec_);

#undef ZR_HELPER_
#undef ZR_

}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRsensor.msgs.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nsec;
        break;
      }

      // optional int32 nsec = 2;
      case 2: {
        if (tag == 16) {
         parse_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRsensor.msgs.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRsensor.msgs.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRsensor.msgs.Time)
  // optional int32 sec = 1;
  if (this->sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sec(), output);
  }

  // optional int32 nsec = 2;
  if (this->nsec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nsec(), output);
  }

  // @@protoc_insertion_point(serialize_end:QRsensor.msgs.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRsensor.msgs.Time)
  // optional int32 sec = 1;
  if (this->sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sec(), target);
  }

  // optional int32 nsec = 2;
  if (this->nsec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nsec(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QRsensor.msgs.Time)
  return target;
}

int Time::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRsensor.msgs.Time)
  int total_size = 0;

  // optional int32 sec = 1;
  if (this->sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sec());
  }

  // optional int32 nsec = 2;
  if (this->nsec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nsec());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRsensor.msgs.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Time* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRsensor.msgs.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRsensor.msgs.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRsensor.msgs.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.nsec() != 0) {
    set_nsec(from.nsec());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRsensor.msgs.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRsensor.msgs.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {

  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  std::swap(sec_, other->sec_);
  std::swap(nsec_, other->nsec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// optional int32 sec = 1;
void Time::clear_sec() {
  sec_ = 0;
}
 ::google::protobuf::int32 Time::sec() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Time.sec)
  return sec_;
}
 void Time::set_sec(::google::protobuf::int32 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:QRsensor.msgs.Time.sec)
}

// optional int32 nsec = 2;
void Time::clear_nsec() {
  nsec_ = 0;
}
 ::google::protobuf::int32 Time::nsec() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Time.nsec)
  return nsec_;
}
 void Time::set_nsec(::google::protobuf::int32 value) {
  
  nsec_ = value;
  // @@protoc_insertion_point(field_set:QRsensor.msgs.Time.nsec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRsensor.msgs.Vector3d)
}

void Vector3d::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRsensor.msgs.Vector3d)
}

void Vector3d::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:QRsensor.msgs.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jointsensors_2eproto();
  return *default_instance_;
}

Vector3d* Vector3d::default_instance_ = NULL;

Vector3d* Vector3d::New(::google::protobuf::Arena* arena) const {
  Vector3d* n = new Vector3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:QRsensor.msgs.Vector3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRsensor.msgs.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRsensor.msgs.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRsensor.msgs.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRsensor.msgs.Vector3d)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:QRsensor.msgs.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRsensor.msgs.Vector3d)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QRsensor.msgs.Vector3d)
  return target;
}

int Vector3d::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRsensor.msgs.Vector3d)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRsensor.msgs.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRsensor.msgs.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRsensor.msgs.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRsensor.msgs.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRsensor.msgs.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRsensor.msgs.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {

  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3d

// optional double x = 1;
void Vector3d::clear_x() {
  x_ = 0;
}
 double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Vector3d.x)
  return x_;
}
 void Vector3d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:QRsensor.msgs.Vector3d.x)
}

// optional double y = 2;
void Vector3d::clear_y() {
  y_ = 0;
}
 double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Vector3d.y)
  return y_;
}
 void Vector3d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:QRsensor.msgs.Vector3d.y)
}

// optional double z = 3;
void Vector3d::clear_z() {
  z_ = 0;
}
 double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Vector3d.z)
  return z_;
}
 void Vector3d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:QRsensor.msgs.Vector3d.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wrench::kForceFieldNumber;
const int Wrench::kTorqueFieldNumber;
const int Wrench::kForceOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wrench::Wrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRsensor.msgs.Wrench)
}

void Wrench::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  force_ = const_cast< ::QRsensor::msgs::Vector3d*>(&::QRsensor::msgs::Vector3d::default_instance());
  torque_ = const_cast< ::QRsensor::msgs::Vector3d*>(&::QRsensor::msgs::Vector3d::default_instance());
  force_offset_ = const_cast< ::QRsensor::msgs::Vector3d*>(&::QRsensor::msgs::Vector3d::default_instance());
}

Wrench::Wrench(const Wrench& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRsensor.msgs.Wrench)
}

void Wrench::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  force_ = NULL;
  torque_ = NULL;
  force_offset_ = NULL;
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:QRsensor.msgs.Wrench)
  SharedDtor();
}

void Wrench::SharedDtor() {
  if (this != default_instance_) {
    delete force_;
    delete torque_;
    delete force_offset_;
  }
}

void Wrench::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wrench::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wrench_descriptor_;
}

const Wrench& Wrench::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jointsensors_2eproto();
  return *default_instance_;
}

Wrench* Wrench::default_instance_ = NULL;

Wrench* Wrench::New(::google::protobuf::Arena* arena) const {
  Wrench* n = new Wrench;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:QRsensor.msgs.Wrench)
  if (GetArenaNoVirtual() == NULL && force_ != NULL) delete force_;
  force_ = NULL;
  if (GetArenaNoVirtual() == NULL && torque_ != NULL) delete torque_;
  torque_ = NULL;
  if (GetArenaNoVirtual() == NULL && force_offset_ != NULL) delete force_offset_;
  force_offset_ = NULL;
}

bool Wrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRsensor.msgs.Wrench)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QRsensor.msgs.Vector3d force = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_torque;
        break;
      }

      // optional .QRsensor.msgs.Vector3d torque = 2;
      case 2: {
        if (tag == 18) {
         parse_torque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torque()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_force_offset;
        break;
      }

      // optional .QRsensor.msgs.Vector3d force_offset = 3;
      case 3: {
        if (tag == 26) {
         parse_force_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRsensor.msgs.Wrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRsensor.msgs.Wrench)
  return false;
#undef DO_
}

void Wrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRsensor.msgs.Wrench)
  // optional .QRsensor.msgs.Vector3d force = 1;
  if (this->has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->force_, output);
  }

  // optional .QRsensor.msgs.Vector3d torque = 2;
  if (this->has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->torque_, output);
  }

  // optional .QRsensor.msgs.Vector3d force_offset = 3;
  if (this->has_force_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->force_offset_, output);
  }

  // @@protoc_insertion_point(serialize_end:QRsensor.msgs.Wrench)
}

::google::protobuf::uint8* Wrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRsensor.msgs.Wrench)
  // optional .QRsensor.msgs.Vector3d force = 1;
  if (this->has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->force_, false, target);
  }

  // optional .QRsensor.msgs.Vector3d torque = 2;
  if (this->has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->torque_, false, target);
  }

  // optional .QRsensor.msgs.Vector3d force_offset = 3;
  if (this->has_force_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->force_offset_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QRsensor.msgs.Wrench)
  return target;
}

int Wrench::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRsensor.msgs.Wrench)
  int total_size = 0;

  // optional .QRsensor.msgs.Vector3d force = 1;
  if (this->has_force()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_);
  }

  // optional .QRsensor.msgs.Vector3d torque = 2;
  if (this->has_torque()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torque_);
  }

  // optional .QRsensor.msgs.Vector3d force_offset = 3;
  if (this->has_force_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_offset_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRsensor.msgs.Wrench)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Wrench* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Wrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRsensor.msgs.Wrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRsensor.msgs.Wrench)
    MergeFrom(*source);
  }
}

void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRsensor.msgs.Wrench)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_force()) {
    mutable_force()->::QRsensor::msgs::Vector3d::MergeFrom(from.force());
  }
  if (from.has_torque()) {
    mutable_torque()->::QRsensor::msgs::Vector3d::MergeFrom(from.torque());
  }
  if (from.has_force_offset()) {
    mutable_force_offset()->::QRsensor::msgs::Vector3d::MergeFrom(from.force_offset());
  }
}

void Wrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRsensor.msgs.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRsensor.msgs.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {

  return true;
}

void Wrench::Swap(Wrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wrench::InternalSwap(Wrench* other) {
  std::swap(force_, other->force_);
  std::swap(torque_, other->torque_);
  std::swap(force_offset_, other->force_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wrench::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wrench_descriptor_;
  metadata.reflection = Wrench_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wrench

// optional .QRsensor.msgs.Vector3d force = 1;
bool Wrench::has_force() const {
  return !_is_default_instance_ && force_ != NULL;
}
void Wrench::clear_force() {
  if (GetArenaNoVirtual() == NULL && force_ != NULL) delete force_;
  force_ = NULL;
}
const ::QRsensor::msgs::Vector3d& Wrench::force() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Wrench.force)
  return force_ != NULL ? *force_ : *default_instance_->force_;
}
::QRsensor::msgs::Vector3d* Wrench::mutable_force() {
  
  if (force_ == NULL) {
    force_ = new ::QRsensor::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRsensor.msgs.Wrench.force)
  return force_;
}
::QRsensor::msgs::Vector3d* Wrench::release_force() {
  // @@protoc_insertion_point(field_release:QRsensor.msgs.Wrench.force)
  
  ::QRsensor::msgs::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
void Wrench::set_allocated_force(::QRsensor::msgs::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:QRsensor.msgs.Wrench.force)
}

// optional .QRsensor.msgs.Vector3d torque = 2;
bool Wrench::has_torque() const {
  return !_is_default_instance_ && torque_ != NULL;
}
void Wrench::clear_torque() {
  if (GetArenaNoVirtual() == NULL && torque_ != NULL) delete torque_;
  torque_ = NULL;
}
const ::QRsensor::msgs::Vector3d& Wrench::torque() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Wrench.torque)
  return torque_ != NULL ? *torque_ : *default_instance_->torque_;
}
::QRsensor::msgs::Vector3d* Wrench::mutable_torque() {
  
  if (torque_ == NULL) {
    torque_ = new ::QRsensor::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRsensor.msgs.Wrench.torque)
  return torque_;
}
::QRsensor::msgs::Vector3d* Wrench::release_torque() {
  // @@protoc_insertion_point(field_release:QRsensor.msgs.Wrench.torque)
  
  ::QRsensor::msgs::Vector3d* temp = torque_;
  torque_ = NULL;
  return temp;
}
void Wrench::set_allocated_torque(::QRsensor::msgs::Vector3d* torque) {
  delete torque_;
  torque_ = torque;
  if (torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:QRsensor.msgs.Wrench.torque)
}

// optional .QRsensor.msgs.Vector3d force_offset = 3;
bool Wrench::has_force_offset() const {
  return !_is_default_instance_ && force_offset_ != NULL;
}
void Wrench::clear_force_offset() {
  if (GetArenaNoVirtual() == NULL && force_offset_ != NULL) delete force_offset_;
  force_offset_ = NULL;
}
const ::QRsensor::msgs::Vector3d& Wrench::force_offset() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.Wrench.force_offset)
  return force_offset_ != NULL ? *force_offset_ : *default_instance_->force_offset_;
}
::QRsensor::msgs::Vector3d* Wrench::mutable_force_offset() {
  
  if (force_offset_ == NULL) {
    force_offset_ = new ::QRsensor::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:QRsensor.msgs.Wrench.force_offset)
  return force_offset_;
}
::QRsensor::msgs::Vector3d* Wrench::release_force_offset() {
  // @@protoc_insertion_point(field_release:QRsensor.msgs.Wrench.force_offset)
  
  ::QRsensor::msgs::Vector3d* temp = force_offset_;
  force_offset_ = NULL;
  return temp;
}
void Wrench::set_allocated_force_offset(::QRsensor::msgs::Vector3d* force_offset) {
  delete force_offset_;
  force_offset_ = force_offset;
  if (force_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:QRsensor.msgs.Wrench.force_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForceTorque::kWrenchFieldNumber;
const int ForceTorque::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForceTorque::ForceTorque()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRsensor.msgs.ForceTorque)
}

void ForceTorque::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  wrench_ = const_cast< ::QRsensor::msgs::Wrench*>(&::QRsensor::msgs::Wrench::default_instance());
  time_ = const_cast< ::QRsensor::msgs::Time*>(&::QRsensor::msgs::Time::default_instance());
}

ForceTorque::ForceTorque(const ForceTorque& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRsensor.msgs.ForceTorque)
}

void ForceTorque::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  wrench_ = NULL;
  time_ = NULL;
}

ForceTorque::~ForceTorque() {
  // @@protoc_insertion_point(destructor:QRsensor.msgs.ForceTorque)
  SharedDtor();
}

void ForceTorque::SharedDtor() {
  if (this != default_instance_) {
    delete wrench_;
    delete time_;
  }
}

void ForceTorque::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceTorque::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceTorque_descriptor_;
}

const ForceTorque& ForceTorque::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jointsensors_2eproto();
  return *default_instance_;
}

ForceTorque* ForceTorque::default_instance_ = NULL;

ForceTorque* ForceTorque::New(::google::protobuf::Arena* arena) const {
  ForceTorque* n = new ForceTorque;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForceTorque::Clear() {
// @@protoc_insertion_point(message_clear_start:QRsensor.msgs.ForceTorque)
  if (GetArenaNoVirtual() == NULL && wrench_ != NULL) delete wrench_;
  wrench_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}

bool ForceTorque::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRsensor.msgs.ForceTorque)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QRsensor.msgs.Wrench wrench = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrench()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional .QRsensor.msgs.Time time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRsensor.msgs.ForceTorque)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRsensor.msgs.ForceTorque)
  return false;
#undef DO_
}

void ForceTorque::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRsensor.msgs.ForceTorque)
  // optional .QRsensor.msgs.Wrench wrench = 1;
  if (this->has_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wrench_, output);
  }

  // optional .QRsensor.msgs.Time time = 2;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_, output);
  }

  // @@protoc_insertion_point(serialize_end:QRsensor.msgs.ForceTorque)
}

::google::protobuf::uint8* ForceTorque::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRsensor.msgs.ForceTorque)
  // optional .QRsensor.msgs.Wrench wrench = 1;
  if (this->has_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->wrench_, false, target);
  }

  // optional .QRsensor.msgs.Time time = 2;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QRsensor.msgs.ForceTorque)
  return target;
}

int ForceTorque::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRsensor.msgs.ForceTorque)
  int total_size = 0;

  // optional .QRsensor.msgs.Wrench wrench = 1;
  if (this->has_wrench()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wrench_);
  }

  // optional .QRsensor.msgs.Time time = 2;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceTorque::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRsensor.msgs.ForceTorque)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ForceTorque* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ForceTorque>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRsensor.msgs.ForceTorque)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRsensor.msgs.ForceTorque)
    MergeFrom(*source);
  }
}

void ForceTorque::MergeFrom(const ForceTorque& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRsensor.msgs.ForceTorque)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_wrench()) {
    mutable_wrench()->::QRsensor::msgs::Wrench::MergeFrom(from.wrench());
  }
  if (from.has_time()) {
    mutable_time()->::QRsensor::msgs::Time::MergeFrom(from.time());
  }
}

void ForceTorque::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRsensor.msgs.ForceTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceTorque::CopyFrom(const ForceTorque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRsensor.msgs.ForceTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceTorque::IsInitialized() const {

  return true;
}

void ForceTorque::Swap(ForceTorque* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForceTorque::InternalSwap(ForceTorque* other) {
  std::swap(wrench_, other->wrench_);
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForceTorque::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceTorque_descriptor_;
  metadata.reflection = ForceTorque_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForceTorque

// optional .QRsensor.msgs.Wrench wrench = 1;
bool ForceTorque::has_wrench() const {
  return !_is_default_instance_ && wrench_ != NULL;
}
void ForceTorque::clear_wrench() {
  if (GetArenaNoVirtual() == NULL && wrench_ != NULL) delete wrench_;
  wrench_ = NULL;
}
const ::QRsensor::msgs::Wrench& ForceTorque::wrench() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.ForceTorque.wrench)
  return wrench_ != NULL ? *wrench_ : *default_instance_->wrench_;
}
::QRsensor::msgs::Wrench* ForceTorque::mutable_wrench() {
  
  if (wrench_ == NULL) {
    wrench_ = new ::QRsensor::msgs::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:QRsensor.msgs.ForceTorque.wrench)
  return wrench_;
}
::QRsensor::msgs::Wrench* ForceTorque::release_wrench() {
  // @@protoc_insertion_point(field_release:QRsensor.msgs.ForceTorque.wrench)
  
  ::QRsensor::msgs::Wrench* temp = wrench_;
  wrench_ = NULL;
  return temp;
}
void ForceTorque::set_allocated_wrench(::QRsensor::msgs::Wrench* wrench) {
  delete wrench_;
  wrench_ = wrench;
  if (wrench) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:QRsensor.msgs.ForceTorque.wrench)
}

// optional .QRsensor.msgs.Time time = 2;
bool ForceTorque::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
void ForceTorque::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
const ::QRsensor::msgs::Time& ForceTorque::time() const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.ForceTorque.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::QRsensor::msgs::Time* ForceTorque::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::QRsensor::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:QRsensor.msgs.ForceTorque.time)
  return time_;
}
::QRsensor::msgs::Time* ForceTorque::release_time() {
  // @@protoc_insertion_point(field_release:QRsensor.msgs.ForceTorque.time)
  
  ::QRsensor::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
void ForceTorque::set_allocated_time(::QRsensor::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:QRsensor.msgs.ForceTorque.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllJointSensors::kJointwrenchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllJointSensors::AllJointSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRsensor.msgs.AllJointSensors)
}

void AllJointSensors::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AllJointSensors::AllJointSensors(const AllJointSensors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRsensor.msgs.AllJointSensors)
}

void AllJointSensors::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AllJointSensors::~AllJointSensors() {
  // @@protoc_insertion_point(destructor:QRsensor.msgs.AllJointSensors)
  SharedDtor();
}

void AllJointSensors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllJointSensors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllJointSensors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllJointSensors_descriptor_;
}

const AllJointSensors& AllJointSensors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jointsensors_2eproto();
  return *default_instance_;
}

AllJointSensors* AllJointSensors::default_instance_ = NULL;

AllJointSensors* AllJointSensors::New(::google::protobuf::Arena* arena) const {
  AllJointSensors* n = new AllJointSensors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllJointSensors::Clear() {
// @@protoc_insertion_point(message_clear_start:QRsensor.msgs.AllJointSensors)
  jointwrench_.Clear();
}

bool AllJointSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRsensor.msgs.AllJointSensors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QRsensor.msgs.ForceTorque jointwrench = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_jointwrench:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_jointwrench()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_jointwrench;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRsensor.msgs.AllJointSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRsensor.msgs.AllJointSensors)
  return false;
#undef DO_
}

void AllJointSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRsensor.msgs.AllJointSensors)
  // repeated .QRsensor.msgs.ForceTorque jointwrench = 1;
  for (unsigned int i = 0, n = this->jointwrench_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jointwrench(i), output);
  }

  // @@protoc_insertion_point(serialize_end:QRsensor.msgs.AllJointSensors)
}

::google::protobuf::uint8* AllJointSensors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRsensor.msgs.AllJointSensors)
  // repeated .QRsensor.msgs.ForceTorque jointwrench = 1;
  for (unsigned int i = 0, n = this->jointwrench_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->jointwrench(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QRsensor.msgs.AllJointSensors)
  return target;
}

int AllJointSensors::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:QRsensor.msgs.AllJointSensors)
  int total_size = 0;

  // repeated .QRsensor.msgs.ForceTorque jointwrench = 1;
  total_size += 1 * this->jointwrench_size();
  for (int i = 0; i < this->jointwrench_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jointwrench(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllJointSensors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QRsensor.msgs.AllJointSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AllJointSensors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllJointSensors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QRsensor.msgs.AllJointSensors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QRsensor.msgs.AllJointSensors)
    MergeFrom(*source);
  }
}

void AllJointSensors::MergeFrom(const AllJointSensors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QRsensor.msgs.AllJointSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  jointwrench_.MergeFrom(from.jointwrench_);
}

void AllJointSensors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QRsensor.msgs.AllJointSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllJointSensors::CopyFrom(const AllJointSensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QRsensor.msgs.AllJointSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllJointSensors::IsInitialized() const {

  return true;
}

void AllJointSensors::Swap(AllJointSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllJointSensors::InternalSwap(AllJointSensors* other) {
  jointwrench_.UnsafeArenaSwap(&other->jointwrench_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllJointSensors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllJointSensors_descriptor_;
  metadata.reflection = AllJointSensors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllJointSensors

// repeated .QRsensor.msgs.ForceTorque jointwrench = 1;
int AllJointSensors::jointwrench_size() const {
  return jointwrench_.size();
}
void AllJointSensors::clear_jointwrench() {
  jointwrench_.Clear();
}
const ::QRsensor::msgs::ForceTorque& AllJointSensors::jointwrench(int index) const {
  // @@protoc_insertion_point(field_get:QRsensor.msgs.AllJointSensors.jointwrench)
  return jointwrench_.Get(index);
}
::QRsensor::msgs::ForceTorque* AllJointSensors::mutable_jointwrench(int index) {
  // @@protoc_insertion_point(field_mutable:QRsensor.msgs.AllJointSensors.jointwrench)
  return jointwrench_.Mutable(index);
}
::QRsensor::msgs::ForceTorque* AllJointSensors::add_jointwrench() {
  // @@protoc_insertion_point(field_add:QRsensor.msgs.AllJointSensors.jointwrench)
  return jointwrench_.Add();
}
::google::protobuf::RepeatedPtrField< ::QRsensor::msgs::ForceTorque >*
AllJointSensors::mutable_jointwrench() {
  // @@protoc_insertion_point(field_mutable_list:QRsensor.msgs.AllJointSensors.jointwrench)
  return &jointwrench_;
}
const ::google::protobuf::RepeatedPtrField< ::QRsensor::msgs::ForceTorque >&
AllJointSensors::jointwrench() const {
  // @@protoc_insertion_point(field_list:QRsensor.msgs.AllJointSensors.jointwrench)
  return jointwrench_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace QRsensor

// @@protoc_insertion_point(global_scope)
